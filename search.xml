<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客如何迁移到新电脑</title>
      <link href="/2023/01/05/Hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
      <url>/2023/01/05/Hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<p>参考教程：<a href="https://blog.csdn.net/qq_43698421/article/details/120407042">CSDN:Hexo博客迁移到新电脑</a></p><ol><li><p>在新电脑行进行环境准备工作，具体的步骤和<a href="https://tool.lu/posts/e593433d.html">Hexo博客搭建基础教程(一)</a>的第1-7步一模一样，大家在新电脑上跟着做即可（注意千万不要做第8步，<code>hexo init blog-demo</code>这一步会覆盖并还原你原本的的源码文件）</p></li><li><p>这时候新建一个文件夹<code>new-blog</code>，用来装你的新博客源码的，进入这个文件夹，准备复制我们旧的博客源码进来，我们可以看到旧的博客项目结构是如下样子的：</p><p><img src="https://picgo.chongqing0111.top/images/202301050138446.webp" alt></p></li></ol><p>   这里红框内的都是需要复制迁移到新的博客的，具体的要不要保留见下表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">需要复制的</th><th style="text-align:center">需要删除的</th></tr></thead><tbody><tr><td style="text-align:center">_config.yml：站点配置文件</td><td style="text-align:center">.git：无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉</td></tr><tr><td style="text-align:center">_config.butterfly.yml：主题配置文件，为了方便主题升级剥离出来的配置文件</td><td style="text-align:center">node_modules：<code>npm install</code>会根据package.json生成</td></tr><tr><td style="text-align:center">package.json：说明使用哪些依赖包</td><td style="text-align:center">public：<code>hexo g</code>会重新编译生成</td></tr><tr><td style="text-align:center">scaffolds：文章的模板</td><td style="text-align:center">.deploy_git：在使用<code>hexo d</code>时也会重新生成</td></tr><tr><td style="text-align:center">source：自己写的博客源码</td><td style="text-align:center">db.json文件：<code>hexo s</code>快速启动所需的数据库</td></tr><tr><td style="text-align:center">themes：主题文件夹（魔改都在里面啦）</td><td style="text-align:center">package-lock.json：记录依赖之间的内部依赖关系，可以根据<code>package.json</code>重新生成</td></tr><tr><td style="text-align:center">.gitignore：说明在提交时哪些文件可以忽略</td></tr></tbody></table></div><ol><li><p>复制所需的文件到新电脑的文件夹之后，在<code>git bash</code>中切换目录到新拷贝的文件夹里，使用<code>npm install</code> 命令，进行模块安装。这里绝对不能使用<code>hexo init</code>初始化，因为有的文件我们已经拷贝生成过来了，所以不必用<code>hexo init</code>去整体初始化，如果不慎用了，则站点的配置文件<code>_config.yml</code>里面内容会被重置，所以这一步一定要慎重：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm i<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令情况并启动项目，进入<code>localhost:4000</code>进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo cl; hexo g; hexo s<br></code></pre></td></tr></table></figure></li><li><p>当本地能成功启动，之后就可以部署到Github，执行以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo d<br></code></pre></td></tr></table></figure><p>如果出现<code>Deploy done</code>，则说明部署成功，稍等两分钟，打开浏览器访问之前的域名就可以看到之前的博客，以后你可以在这台新电脑上魔改和写文章了~</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 转载内容 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加分类和标签</title>
      <link href="/2023/01/05/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2023/01/05/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ hexo new page categories<br></code></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">INFO  Created: E:\Blog\blog\source\_posts\2023-01-04-post.md<br></code></pre></td></tr></table></figure><p>根据上面的路径，找到<code>2023-01-04-post.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">---<br>title: 文章分类<br>date: 2022-01-07 22:53:43<br>---<br></code></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="1、创建“分类”"><a href="#1、创建“分类”" class="headerlink" title="1、创建“分类”"></a>1、创建“分类”</h3><ul><li><h4 id="1-1-分类一般用法"><a href="#1-1-分类一般用法" class="headerlink" title="1.1 分类一般用法"></a>1.1 分类一般用法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 分类一般用法1<br>date: 2022-01-07 22:53:43<br><span class="hljs-section">categories: web前端</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 分类一般用法2<br>date: 2022-01-07 22:53:43<br>categories: <br><span class="hljs-section">- web前端</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure></li><li><h4 id="1-2-多个同级分类"><a href="#1-2-多个同级分类" class="headerlink" title="1.2 多个同级分类"></a>1.2 多个同级分类</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 多个同级分类<br>date: 2022-01-07 22:53:43<br>categories: <br><span class="hljs-bullet">-</span> [web前端]<br><span class="hljs-section">- [Hexo]</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><h4 id="1-3-父子嵌套分类"><a href="#1-3-父子嵌套分类" class="headerlink" title="1.3 父子嵌套分类"></a>1.3 父子嵌套分类</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 父子嵌套分类<br>date: 2022-01-07 22:53:43<br>categories: <br><span class="hljs-bullet">-</span> [web前端]<br><span class="hljs-section">- [html]</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>​    使分类html成为web前端的子分类</p></li><li><h4 id="1-4并列-父子分类"><a href="#1-4并列-父子分类" class="headerlink" title="1.4并列+父子分类"></a>1.4并列+父子分类</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 并列+父子分类<br>date: 2022-01-07 22:53:43<br>categories: <br><span class="hljs-bullet">-</span> [web前端,html]<br><span class="hljs-bullet">-</span> [web前端,css]<br><span class="hljs-section">- [Hexo]</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>​    此时这篇文章同时包括三个分类:  html 和 css分别都是父分类 web前端的子分类，同时 Hexo 是一个与 web前端 同级的分类。</p></li></ul><h3 id="2、创建“标签”"><a href="#2、创建“标签”" class="headerlink" title="2、创建“标签”"></a>2、创建“标签”</h3><ul><li><h4 id="2-1-标签一般用法"><a href="#2-1-标签一般用法" class="headerlink" title="2.1 标签一般用法"></a>2.1 标签一般用法</h4>  <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 标签一般用法1<br>date: 2022-01-07 22:53:43<br><span class="hljs-section">tags: [hexo]</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 标签一般用法2<br>date: 2022-01-07 22:53:43<br>tags: <br><span class="hljs-section">- hexo</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure></li><li><h4 id="2-2-多个同级标签"><a href="#2-2-多个同级标签" class="headerlink" title="2.2 多个同级标签"></a>2.2 多个同级标签</h4>  <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 多个同级标签1<br>date: 2022-01-07 22:53:43<br><span class="hljs-section">tags: [hexo,html,css]</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 多个同级标签2<br>date: 2022-01-07 22:53:43<br>tags: <br><span class="hljs-bullet">-</span> hexo<br><span class="hljs-bullet">-</span> html<br><span class="hljs-section">- css</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。保存后，之后执行`hexo new 文章名`命令生成的文件，页面里就有`categories:` 和`tags`项了。<br><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>snackbar弹窗的调用</title>
      <link href="/2023/01/04/snackbar%E5%BC%B9%E7%AA%97%E7%9A%84%E8%B0%83%E7%94%A8/"/>
      <url>/2023/01/04/snackbar%E5%BC%B9%E7%AA%97%E7%9A%84%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="note primary no-icon flat"><p>近期因为某些原因，也许是因为刚接触JS比较好奇JS的用法，也许是因为看到其它大佬网站的弹窗心动了，于是我开始研究起了弹窗，但我是一个喜欢简单的人，面对各位大佬的顶级教程，我还是比较喜欢butterfly自带的，不为别的，只是因为它“简单”。</p></div><div class="note success no-icon flat"><p>经过研究发现butterfly使用的是Snackbar弹窗，但是两者的调用方法又有所区别，一时也没搞懂butterfly的怎么调用，但是可以确定的是butterfly的弹窗只是在Snackbar的基础上修改了一下，于是经过多次失败还是不甘心，突发奇想，我可以直接调用原生的弹窗，然后用css改的和butterfly的一模一样就行了，于是就有了这篇文章。</p></div><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>官方文档：<a href="https://www.polonel.com/snackbar/">https://www.polonel.com/snackbar/</a></p><p><code>以下内容仅供参考，具体请查阅官方文档。</code></p><h3 id="弹窗位置"><a href="#弹窗位置" class="headerlink" title="弹窗位置"></a>弹窗位置</h3><p>可选：<code>top-left</code> / <code>top-center</code> / <code>top-right</code> / <code>bottom-left</code> / <code>bottom-center</code> / <code>bottom-right</code></p><p>翻译：左上/中上/右上/左下/中下/右下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123;<span class="hljs-attr">pos</span>: <span class="hljs-string">&#x27;bottom-left&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:center">Default</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">text</td><td style="text-align:center"><em>null</em></td><td style="text-align:center">要在通知中拆分的文本。</td></tr><tr><td style="text-align:center">textColor</td><td style="text-align:center"><em>#FFFFFF</em></td><td style="text-align:center">通知文本的文本颜色。默认值为白色。</td></tr><tr><td style="text-align:center">pos</td><td style="text-align:center"><em>bottom-left</em></td><td style="text-align:center">通知将显示的位置。有关可能的位置，请参阅上面的示例。</td></tr><tr><td style="text-align:center">customClass</td><td style="text-align:center"><em>null</em></td><td style="text-align:center">将自定义类添加到通知中以进行自定义样式设置。</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center"><em>auto</em></td><td style="text-align:center">通知的宽度。用于根据需要<em>缩小/扩展</em>窗口。</td></tr><tr><td style="text-align:center">showAction</td><td style="text-align:center"><em>true</em></td><td style="text-align:center">布尔值来显示操作 buton 或不显示。</td></tr><tr><td style="text-align:center">actionText</td><td style="text-align:center"><em>Dismiss</em></td><td style="text-align:center">要显示为操作按钮的文本。</td></tr><tr><td style="text-align:center">actionTextAria</td><td style="text-align:center"><em>Dismiss, Description for Screen Readers</em></td><td style="text-align:center">屏幕阅读器的文本。</td></tr><tr><td style="text-align:center">alertScreenReader</td><td style="text-align:center"><em>false</em></td><td style="text-align:center">确定屏幕阅读器是否会宣布弹窗消息。</td></tr><tr><td style="text-align:center">actionTextColor</td><td style="text-align:center"><em>#4CAF50</em></td><td style="text-align:center">操作按钮的文本颜色。</td></tr><tr><td style="text-align:center">backgroundColor</td><td style="text-align:center"><em>#323232</em></td><td style="text-align:center">通知窗口的背景色。</td></tr><tr><td style="text-align:center">duration</td><td style="text-align:center"><em>5000</em></td><td style="text-align:center">显示通知的时间（以毫秒为单位）。</td></tr><tr><td style="text-align:center">onActionClick</td><td style="text-align:center"><em>function(ele)</em></td><td style="text-align:center">默认操作关闭通知。</td></tr><tr><td style="text-align:center">onClose</td><td style="text-align:center"><em>function(ele)</em></td><td style="text-align:center">在通知已关闭时触发。</td></tr></tbody></table></div><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><h3 id="主题弹窗的调用："><a href="#主题弹窗的调用：" class="headerlink" title="主题弹窗的调用："></a>主题弹窗的调用：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btf.<span class="hljs-title function_">snackbarShow</span>(<span class="hljs-string">&#x27;欢迎来到徐州市第六百七十二号老实人的小站！&#x27;</span>) <br>或<br><span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">GLOBAL_CONFIG</span>.<span class="hljs-property">Snackbar</span>) &#123;<br>    btf.<span class="hljs-title function_">snackbarShow</span>(<span class="hljs-string">&#x27;ServiceWorker未激活&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="snackbar的调用"><a href="#snackbar的调用" class="headerlink" title="snackbar的调用"></a>snackbar的调用</h3><ul><li><p>无操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">showAction</span>: <span class="hljs-literal">false</span>, &#125;);<br></code></pre></td></tr></table></figure></li><li><p>操作文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">actionText</span>: <span class="hljs-string">&#x27;Thanks!&#x27;</span>, &#125;);<br></code></pre></td></tr></table></figure></li><li><p>文本颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">actionTextColor</span>: <span class="hljs-string">&#x27;#ff0000&#x27;</span>, &#125;);<br></code></pre></td></tr></table></figure></li><li><p>单击“回调”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Snackbar</span>.<span class="hljs-title function_">show</span>(&#123;<br>   <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;I have a custom callback when action button is clicked.&#x27;</span>,<br>   <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;475px&#x27;</span>,<br>   <span class="hljs-attr">onActionClick</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>       <span class="hljs-comment">//Set opacity of element to 0 to close Snackbar</span><br>       $(element).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;opacity&#x27;</span>, <span class="hljs-number">0</span>);<br>       <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Clicked Called!&#x27;</span>);<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul><h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Snackbar.show(&#123; actionText: &#x27;关闭&#x27;,text: &#x27;欢迎来到徐州市第六百七十二号老实人的小站！&#x27;,backgroundColor: &#x27;#9c9&#x27;,actionTextColor: &#x27;#ffffff&#x27;,pos: &#x27;bottom-center&#x27;,duration: &#x27;5000&#x27; &#125;);<br></code></pre></td></tr></table></figure><h2 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h2><p>为了确保snackbar跟主题的一模一样，需要在自定义css里面写入以下内容：</p><p><code>关于颜色，如果比较随便的话可以忽略掉，调用的时候可以单独配置颜色，我只是想一模一样才写的。</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-comment">/* 颜色设置 */</span><br><span class="hljs-selector-attr">[data-theme=light]</span> &#123;<br>  <span class="hljs-attr">--sianx_popup</span>: <span class="hljs-number">#9c9</span>;<span class="hljs-comment">/* 白天 */</span><br>&#125;<br><span class="hljs-selector-attr">[data-theme=dark]</span> &#123;<br>  <span class="hljs-attr">--sianx_popup</span>: <span class="hljs-number">#343434</span>;<span class="hljs-comment">/* 夜间 */</span><br>&#125;<br><span class="hljs-selector-class">.snackbar-pos</span> &#123;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span> <span class="hljs-meta">!important</span>;<span class="hljs-comment">/* 弹窗圆角 */</span><br>&#125;<br><span class="hljs-selector-class">.snackbar-container</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--sianx_popup) <span class="hljs-meta">!important</span>;<span class="hljs-comment">/* 弹窗颜色 */</span><br>&#125;<br><span class="hljs-comment">/* 字体设置，没有自定义字体的可忽略，这边只是提醒一下 */</span><br><span class="hljs-selector-class">.snackbar-container</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;aqqxs&#x27;</span>, sans-serif <span class="hljs-meta">!important</span>; <span class="hljs-comment">/* snackbar弹窗 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>看到这里应该已经知道大概怎么调用了，那么我们开始实践操作一下。</p><p>这是我的一个主页欢迎的弹窗，写进JS文件里就可以在指定的链接弹出弹窗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if(window.location.href == &#x27;http://localhost:4000/&#x27;||window.location.href == &#x27;https://sianx.com/&#x27;||window.location.href == &#x27;https://www.sianx.com/&#x27;||window.location.href == &#x27;https://blog.sianx.com/&#x27;)&#123;<br>    Snackbar.show(&#123; actionText: &#x27;关闭&#x27;,text: &#x27;欢迎来到徐州市第六百七十二号老实人的小站！&#x27;,backgroundColor: &#x27;#9c9&#x27;,actionTextColor: &#x27;#ffffff&#x27;,pos: &#x27;bottom-center&#x27;,duration: &#x27;5000&#x27; &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API</title>
      <link href="/2022/12/18/Web%20API/"/>
      <url>/2022/12/18/Web%20API/</url>
      
        <content type="html"><![CDATA[<!-- ![](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212181531038.png) --><p><img src="https://picgo.chongqing0111.top/images/202212181531038.png" alt></p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。简单来说就是一个工具，以便于能轻松实现想要完成的功能。</p><ul><li>任何开发语言都有自己的 API</li><li>API 的特征输入和输出(I/O)</li><li>API 的使用方法(<code>console.log()</code>)</li></ul><h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><p>Web API是浏览器提供的一套操作浏览器功能和页面元素的API（DOM和BOM）</p><p>此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>可以改变网页的内容、结构和样式</p><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><!-- ![DOM树](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212172358303.png) --><p><img src="https://picgo.chongqing0111.top/images/202212172358303.png" alt="DOM树"></p><p>文档：一个页面就是一个文档  document<br>元素：页面中的所有标签都是元素，element<br>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），node</p><p><strong>DOM把以上内容都看作是对象</strong></p><h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById()"></a><code>getElementById()</code></h3><p>注意：</p><ul><li>因为文档页面从上往下加载，所以先有标签，然后才能 <code>getElementById</code></li><li>参数是字符串，所以需要加引号</li><li>返回的是一个 element 对象</li></ul><p><code>console.dir</code> 可以打印返回的元素对象，更好的查看里面的属性和方法</p><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName()"></a><code>getElementsByTagName()</code></h3><ul><li>参数是字符串，所以需要加引号d</li><li>得到的是对象的集合，可以用遍历来获取所有对象</li><li>得到的是动态的<br>例子: 获取ol里面的li</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123一二三四五<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123上山打老虎<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123老虎有几只<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123快来数一数<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123一二三四五<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//伪数组不能做父元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> list = ol[<span class="hljs-number">0</span>].<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(list);</span><br></code></pre></td></tr></table></figure><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h3><p>类名选择器</p><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h3><p>HTML5新增的</p><p>返回指定选择器的<strong>第一个对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>15212<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1641238<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>151232<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1612348<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//注意这里括号里面必须有“.”，因为需要指定选择的选择器</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> boxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(boxs);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><p>返回指定选择器的所有对象集合<br>用法和querySelector()一样</p><h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><p>获取body元素</p><h3 id="document-documentElement"><a href="#document-documentElement" class="headerlink" title="document.documentElement"></a>document.documentElement</h3><p>获取html元素</p><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><p>JavaScript使我们有能力创建动态页面，而事件是可以被JavaScript侦测到的行为。<br>网页中的每个元素都可以产生某些触发JavaScript的事件。</p><h3 id="事件由三部分组成："><a href="#事件由三部分组成：" class="headerlink" title="事件由三部分组成："></a>事件由三部分组成：</h3><ul><li>事件源   事件被触发的对象 比如按钮</li><li>事件类型   如何触发 比如鼠标点击、鼠标经过、键盘按下、滚动滚轮</li><li>事件处理程序   通过函数赋值的方式完成</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript">    btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;触发事件&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件都有：</p><div class="table-container"><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></div><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><p>JavaScript可以改变网页内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。</p><h3 id="element-innerText"><a href="#element-innerText" class="headerlink" title="element.innerText"></a>element.innerText</h3><ul><li>从起始位置到终止位置的内容，但它去除Html标签，同时空格和换行也会去掉</li><li>innerText不识别HTML标签</li><li>可读写的，可以获取元素里面的内容</li></ul><h3 id="element-innerHTML"><a href="#element-innerHTML" class="headerlink" title="element.innerHTML"></a>element.innerHTML</h3><ul><li>从起始位置到终止位置的全部内容，包括Html标签，同时保留空格和换行</li><li>能识别HTML标签</li><li>可读写的，可以获取元素里面的内容</li></ul><h3 id="修改表单属性"><a href="#修改表单属性" class="headerlink" title="修改表单属性"></a>修改表单属性</h3><p>disabled     让某个表单被禁用，不能被点击，<br>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//或者写成下面这种</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//this指向的是时间函数的调用者</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例</strong>：仿京东显示密码，点击按钮将密码框显示为文本框，并可以查看密码明文</p><p>算法：利用一个flag变量，如果是1就切换为文本框，如果是0就切换为密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">form</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#3c3c3c</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">164px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的用户名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/闭眼.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的密码&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> eye = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;password&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> flag = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">    eye.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag === <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            password.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text&#x27;</span>;</span><br><span class="language-javascript">            eye.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;images/睁眼.png&#x27;</span>;</span><br><span class="language-javascript">            flag = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            password.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;password&#x27;</span>;</span><br><span class="language-javascript">            eye.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;images/闭眼.png&#x27;</span>;</span><br><span class="language-javascript">            flag = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"> </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改样式属性"><a href="#修改样式属性" class="headerlink" title="修改样式属性"></a>修改样式属性</h3><h4 id="element-style"><a href="#element-style" class="headerlink" title="element.style"></a>element.style</h4><p>行内样式操作，修改元素样式，如果样式比较少或者功能简单的情况下使用<br>注意：</p><ul><li>里面的属性是驼峰命名法</li><li>JS修改的是行内样式，权重比CSS的高</li><li><h4 id="element-className"><a href="#element-className" class="headerlink" title="element.className"></a>element.className</h4></li></ul><p>类名样式操作，适合样式比较多的情况下使用<br>修改了元素的类名</p><p><strong>注意：</strong>这个方法直接修改了类名，也就是说会覆盖原来的类名，原来的就不生效了<br>如果想要保留原先的类名，这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//假设first 是原来的类名，change是想加入的<br>this.className = &#x27;first change&#x27;;<br></code></pre></td></tr></table></figure><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><p>获得焦点 onfocus<br>失去焦点 onblur</p><p>案例：京东搜索框，默认是“手机”两个字，当用户点击搜索框的时候，“手机”两个字消失，当输入文本之后，保持文本内容不变</p><p>分析：</p><ul><li>如果获得焦点，判断里面是否是默认文字，如果是默认文字，就清空表单内容</li><li>如果失去焦点，判断表单是否为空，如果为空，则表单内容改为默认文字</li><li>获得焦点的时候，把文本框里的文字变黑</li><li>失去焦点的时候，文本框文字变浅</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">input.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;手机&#x27;</span>) &#123;</span><br><span class="language-javascript">    input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;#3c3c3c&#x27;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">input.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">    input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;手机&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;#999&#x27;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：密码提示框，选中的时候提示密码的长度和标准，失去焦点的时候，检查密码是否合乎规范</p><p>分析：</p><ul><li>如果获得焦点，提示密码的长度和标准</li><li>如果失去焦点，检查密码是否合乎规范，如果不符合规范，就提示</li><li>因为改变的样式比较多，所以用className来修改样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.message</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/message.png</span>) no-repeat left center;</span><br><span class="language-css">        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.error</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/error.png</span>) no-repeat left center;</span><br><span class="language-css">        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/right.png</span>) no-repeat left center;</span><br><span class="language-css">        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;register&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>请输入6~16位密码<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.pwd&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.message&#x27;</span>);</span><br><span class="language-javascript">    pwd.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (pwd.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">16</span> || pwd.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            message.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;error&#x27;</span>;</span><br><span class="language-javascript">            message.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;您输入的位数不对，要求6~16位&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            message.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;right&#x27;</span>;</span><br><span class="language-javascript">            message.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;对辽~&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="操作元素小总结"><a href="#操作元素小总结" class="headerlink" title="操作元素小总结"></a>操作元素小总结</h3><!-- ![](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212181534929.png) --><p><img src="https://picgo.chongqing0111.top/images/202212181534929.png" alt></p><h3 id="排他思想···"><a href="#排他思想···" class="headerlink" title="排他思想···"></a>排他思想···</h3><p>两层循环，先排除其他人，然后再设置自己的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">    btns[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//  1. 先把所有颜色的背景颜色都清空</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; btns.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">            btns[j].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//  2. 再把想要的背景颜色改成pink</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：百度换肤效果</p><p>分析：</p><ul><li>利用循环给一组元素注册点击事件</li><li>当鼠标经过一张图片，当前的页面背景换成经过的图片，鼠标移开之后，换回默认的</li><li>当点击了图片，当前的页面背景换成点击的图片</li><li>核心算法：把当前图片的src路径取过来，给body作为背景</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">images/bg1.jpg</span>) no-repeat center top;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.baidu</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">410px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.baidu</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.baidu</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baidu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bg1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bg2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bg3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bg4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> images = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.baidu&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; images.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//temp 存储原来的背景</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> temp;</span><br><span class="language-javascript">            images[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span> + <span class="hljs-string">&#x27;)&#x27;</span>;</span><br><span class="language-javascript">                temp = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span> + <span class="hljs-string">&#x27;)&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            images[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                temp = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = <span class="hljs-string">&#x27;url(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span> + <span class="hljs-string">&#x27;)&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            images[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundImage</span> = temp;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例： 表单全选取消全选</p><p>分析：</p><ul><li>点击上面全选复选框，下面所有的复选框都选中（全选）</li><li>再次点击全选复选框，下面所有的复选框都不中选（取消全选）</li><li>如果下面复选框全部选中，上面全选按钮就自动选中</li><li>如果下面复选框有一个没有选中，上面全选按钮就不选中</li><li>所有复选框一开始默认都没选中状态</li><li>下面复选框需要全部选中，上面全选才能选中做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有的复选框是否有没选中的，如果有一个没选中的上面全选就不选中。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">163</span>, <span class="hljs-number">163</span>, <span class="hljs-number">163</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">thead</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkAll&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iPhone Xs Max<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iPad Pro<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>iWatch<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>AirPods<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>         <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> checkAll = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#checkAll&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> trs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>).<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tbCheck = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>).<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            trs[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;rgb(200, 200, 200)&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            trs[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        checkAll.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; tbCheck.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">                tbCheck[j].<span class="hljs-property">checked</span> = checkAll.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//下面的全部选中，上面的就选中</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; tbCheck.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            tbCheck[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// flag 控制全选按钮是否被选中</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; tbCheck.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (!(tbCheck[j].<span class="hljs-property">checked</span>)) &#123;</span><br><span class="language-javascript">                        flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">break</span>;      <span class="hljs-comment">// 退出for循环，提高运行效率</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                checkAll.<span class="hljs-property">checked</span> = flag;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="操作元素-1"><a href="#操作元素-1" class="headerlink" title="操作元素"></a>操作元素</h3><h4 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h4><ul><li>element.属性     获取内置属性值（元素自带的属性）</li><li>element.getAttribute(‘属性’)    主要获取自定义的属性（标准），我们定义的属性</li></ul><h4 id="设置属性值"><a href="#设置属性值" class="headerlink" title="设置属性值"></a>设置属性值</h4><ul><li>element.属性 = ‘值’；</li><li>element.setAttribute(‘属性’, ‘值’)    主要更改自定义的属性</li></ul><h4 id="移除属性值"><a href="#移除属性值" class="headerlink" title="移除属性值"></a>移除属性值</h4><ul><li>element.removeAttribute(‘属性’)    主要移除自定义的属性（标准）</li></ul><h4 id="TAB案例-（重点）"><a href="#TAB案例-（重点）" class="headerlink" title="TAB案例 （重点）"></a>TAB案例 （重点）</h4><p>分析：</p><ul><li>一个大盒子，里面上下两个小盒子</li><li>上面的模块，点击某一个之后，这个的背景色是红色，其余的是灰色（排他思想）</li><li>点击某一个之后，显示这个模块对应的内容，其他的隐藏，这个要写到点击事件里面</li><li>下面的显示内容和上面的小 li 一一对应</li><li>核心思路：<ul><li>给上面的tab_list 添加自定义属性，属性号从0开始</li><li>当点击上面的模块，下面的队形的显示模块开始显示，其他的隐藏</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.tab</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.tab_list</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">162</span>, <span class="hljs-number">162</span>, <span class="hljs-number">162</span>);</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c81623</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.tab_list</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.tab_list</span> <span class="hljs-selector-class">.current</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c81623</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab_list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;current&quot;</span>&gt;</span>商品介绍<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>规格与包装<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>售后保障<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>商品评价(1.1万+)<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>手机社区<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab_con&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block&quot;</span>&gt;</span><br>                商品介绍模块内容<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                规格与包装模块内容<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                售后保障模块内容<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                商品评价模块内容<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                手机社区模块内容<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> tab_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.tab_list&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lis = tab_list.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> items = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.item&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//给5个li设置索引号</span></span><br><span class="language-javascript">        lis[i].<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>, i);</span><br><span class="language-javascript">        lis[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//干掉其他人</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; lis.<span class="hljs-property">length</span>; j++) &#123;</span><br><span class="language-javascript">                lis[j].<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;current&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; items.<span class="hljs-property">length</span>; k++) &#123;</span><br><span class="language-javascript">                items[k].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            items[index].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h3><p>自定义属性目的：为了保存并使用数据，有些数据保存到页面中，为不是数据库中</p><h4 id="设置H5自定义属性"><a href="#设置H5自定义属性" class="headerlink" title="设置H5自定义属性"></a>设置H5自定义属性</h4><p>但是有些自定义属性容易引以歧义，不容易判断是内置属性还是自定义属性，所以H5给我们新增了自定义属性<br>H5规定自定义属性以 “data-”  开头</p><h4 id="获取H5自定义属性"><a href="#获取H5自定义属性" class="headerlink" title="获取H5自定义属性"></a>获取H5自定义属性</h4><ul><li>兼容性：element.getAttribute(‘属性’)</li><li>H5新增读取自定义属性api：element.dataset.index 或者 element.dataset[ ‘index’ ]</li></ul><p>注意：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-list-name</span>=<span class="hljs-string">&quot;andy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-list-name&#x27;</span>));</span><br><span class="language-javascript"><span class="hljs-comment">//上下三种方法都可以，但是如果用下面这两种方法的话，要用驼峰命名法</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>.<span class="hljs-property">listName</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;listName&#x27;</span>]);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>利用DOM提供的方法获取元素  （逻辑性不强，繁琐）</p><ul><li>document.getElementById()</li><li>document.getElementByTagName()</li><li>document.querySelector  等等</li></ul><p>利用    （简单、符合逻辑）</p><ul><li>利用父子兄的节点关系获取元素</li><li>逻辑性强，但是兼容性差</li></ul><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><!-- ![DOM树](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212180000771.png) --><p><img src="https://picgo.chongqing0111.top/images/202212180000771.png" alt="DOM树"></p><p>页面中所有的内容（标签、属性、文本、注释等）都是节点。节点用node表示。</p><p>HTML DOM树中的所有节点均可通过JavaScript 进行访问，所有HTML节点均可被修改，也可以创建或删除。</p><p>一般的，节点至少由nodeType（节点类型）、 nodeName（节点名称）、 nodeValue（节点值）这三个基本属性。</p><ul><li>元素节点 nodeType 为1</li><li>属性节点 nodeType 为2</li><li>文本节点 nodeType 为3 （文本节点包括文字、空格、换行等等）</li></ul><p>在实际开发中，节点操作主要操作的是元素节点。</p><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p>最常见的是<strong>父子兄层级关系</strong>。</p><h4 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h4><h5 id="node-parentNode"><a href="#node-parentNode" class="headerlink" title="node.parentNode"></a>node.parentNode</h5><p>注意：得到的离元素最近的父级节点（亲爸爸），如果找不到就返回null</p><h4 id="子级节点"><a href="#子级节点" class="headerlink" title="子级节点"></a>子级节点</h4><h6 id="parentNode-childNodes-标准"><a href="#parentNode-childNodes-标准" class="headerlink" title="parentNode.childNodes     (标准)"></a>parentNode.childNodes     (标准)</h6><p>返回包含指定节点的子节点的集合，该集合为即时更新的集合<br>包含的子节点包含元素节点、文本节点等等</p><p>所以用 nodeType 判断，用for循环遍历</p><h5 id="parentNode-children-非标准"><a href="#parentNode-children-非标准" class="headerlink" title="parentNode.children     (非标准)"></a>parentNode.children     (非标准)</h5><p>得到所有的子元素节点，虽然是非标准的，但是得到了浏览器的支持，所以以后大量使用这个</p><h6 id="parentNode-firstChild"><a href="#parentNode-firstChild" class="headerlink" title="parentNode.firstChild"></a>parentNode.firstChild</h6><p>返回第一个子节点，找不到返回null,不管是文本节点还是元素节点都能找到</p><h5 id="parentNode-firstElementChild"><a href="#parentNode-firstElementChild" class="headerlink" title="parentNode.firstElementChild"></a>parentNode.firstElementChild</h5><p>返回第一个子元素节点，找不到返回null,只返回元素节点（IE9以上才支持）</p><h6 id="parentNode-lastChild"><a href="#parentNode-lastChild" class="headerlink" title="parentNode.lastChild"></a>parentNode.lastChild</h6><p>返回最后一个子节点，找不到返回null,不管是文本节点还是元素节点都能找到</p><h5 id="parentNode-lastElementChild"><a href="#parentNode-lastElementChild" class="headerlink" title="parentNode.lastElementChild"></a>parentNode.lastElementChild</h5><p>返回最后一个子元素节点，找不到返回null,只返回元素节点（IE9以上才支持）</p><p>实际开发中的办法：</p><p>parentNode.children[i]</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例：新浪下拉菜单</p><p>分析：nav导航栏中有ul和li，li下面又有ul和li，第二层ul和li在鼠标移上去的时候才显示</p><ul><li>导航栏里面的li都要有鼠标经过的效果，所以需要循环注册</li><li>核心原理：当鼠标经过li 的时候，孩子的ul 和li 显示，当鼠标离开，则隐藏</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>新浪网<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span>&gt;<span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span>&gt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fecc5b</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fecc5b</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fecc5b</span>;</span><br><span class="language-css"><span class="hljs-comment">/*             width: 50px;</span></span><br><span class="hljs-comment"><span class="language-css">            text-align: center; */</span></span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFF5DA</span>;</span><br><span class="language-css">        &#125; </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>微博<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>微博<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>微博<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>私信<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>评论<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>@我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.nav&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> lis = nav.<span class="hljs-property">children</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//循环注册事件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        lis[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        lis[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p>node.nextSibling 得到下一个兄弟节点，包括元素节点和文本节点<br>node.previousSibling  得到上一个兄弟节点，包括元素节点和文本节点</p><p>//下面两个方法只有IE9以上才能兼容<br>node.nextElementSibling 得到下一个兄弟元素节点，只有元素节点<br>node.previousElementSibling  得到上一个兄弟元素节点，只有元素节点</p><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><p>document.createElement(‘tagName’)</p><p>这个方法创建由tagName指定的 HTML 元素，因为这些元素原先不存在，是根据我们的需求动态生成的，所以也称为<strong>动态创建元素节点</strong>。</p><p>node.appendChild(child);</p><p>它是追加元素，是在指定父节点的子节点的末尾添加。</p><p>node.insertBefore(child, 指定元素);</p><h4 id="留言板案例"><a href="#留言板案例" class="headerlink" title="留言板案例"></a>留言板案例</h4><p>分析：</p><ul><li>页面组成：一个文本域，一个提交按钮，一个留言板</li><li>当点击提交按钮的时候，先判断文本域内容是不是空，如果是空，就警告</li><li>如果不是空，就新建一个li，然后把文本域的内容赋值给li，然后在ul里面的前面添加li</li></ul><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>node.removeChild(child);</p><p>从DOM中删除一个子节点，返回删除的节点</p><h4 id="删除留言案例"><a href="#删除留言案例" class="headerlink" title="删除留言案例"></a>删除留言案例</h4><p>案例分析：</p><ul><li>在留言板案例的基础上添加功能</li><li>当把文本域的内容幅值给 li 的时候，多添加一个删除的链接，</li><li>循环把所有的链接获取过来，当我们点击一个链接的时候，删除当前链接所在的 li</li><li>阻止链接跳转需要添加javascript:void(0);或者 javascript:;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">//获取元素</span><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>        <span class="hljs-comment">//注册事件</span><br>        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (text.<span class="hljs-property">value</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您没有输入任何内容&#x27;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>                <span class="hljs-comment">//将文本域的内容赋值给li，同时后面添加一个删除留言的a链接</span><br>                li.<span class="hljs-property">innerHTML</span> = text.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>                ul.<span class="hljs-title function_">insertBefore</span>(li, ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a&#x27;</span>); <br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">as</span>.<span class="hljs-property">length</span>; i++) &#123;<br>                    <span class="hljs-keyword">as</span>[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-comment">//删除的是a当前所在的li</span><br>                        ul.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>);<br>                    &#125;<br>                &#125;               <br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="复制节点（克隆节点）"><a href="#复制节点（克隆节点）" class="headerlink" title="复制节点（克隆节点）"></a>复制节点（克隆节点）</h4><p>node.cloneNode()<br>这个方法返回一个节点的副本</p><p>注意：</p><ul><li>如果括号里面的参数为空，那么只是浅拷贝，即只复制节点本身，不克隆里面的子节点</li><li>如果括号里面的参数为true，那么是深拷贝，复制标签并且复制里面的内容</li></ul><h4 id="三种动态创建元素区别"><a href="#三种动态创建元素区别" class="headerlink" title="三种动态创建元素区别"></a>三种动态创建元素区别</h4><ul><li>document.write()<ul><li>文档流执行完毕之后，他会导致页面全部重绘</li></ul></li><li>document.innerHTML()<ul><li>将内容写入某个DOM节点，不会导致页面全部重绘</li><li>拼接字符串的效率低</li><li>创建多个元素效率更高，（不要拼接字符串，采取数组形式拼接），结构稍显复杂</li></ul></li><li>document.createElement()<ul><li>创建多个元素效率稍低一点点，但是结构更清晰</li></ul></li></ul><p><strong>总结</strong>：不同浏览器下，innerHTML比createElement效率高</p><h2 id="DOM重点核心"><a href="#DOM重点核心" class="headerlink" title="DOM重点核心"></a>DOM重点核心</h2><p>文档对象模型</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li>appendChild</li><li>insertBefore</li></ul><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li>removeChild</li></ul><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>修改DOM元素的属性，DOM元素的内容、属性、表单的值等</p><ul><li>修改元素属性：src、href、title等</li><li>修改普通元素内容：innerHTML、innerText</li><li>修改表单元素：value、type、disable等</li><li>修改元素样式：style、className</li></ul><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul><li>DOM提供的API方法：getElementById、getElementByTagName古老用法不太推荐</li><li>H5提供的新方法：querySelecter、querySelectorAll提倡使用</li><li>利用节点操作获取元素：父（parentNode）、子（children）、兄（previousElementSibling、nextElementSibling）提倡使用</li></ul><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><ul><li>setAttribute ： 设置DOM的属性</li><li>getAttribute ： 得到DOM的属性</li><li>removeAttribute ： 移除属性</li></ul><h3 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h3><div class="table-container"><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></div><h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>给元素添加事件，称为注册时间或者绑定事件。</p><p>注册事件有两种方式：传统方式和方法监听注册方式</p><h3 id="传统注册方式"><a href="#传统注册方式" class="headerlink" title="传统注册方式"></a>传统注册方式</h3><ul><li>利用on开头的事件onclick</li><li><button onclick="alert('hi')"></button></li><li>btn.onclick = function () {}</li><li>特点：注册事件的<strong>唯一性</strong></li><li>同一个元素同一个事件著能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</li></ul><h3 id="监听注册方式"><a href="#监听注册方式" class="headerlink" title="监听注册方式"></a>监听注册方式</h3><ul><li>W3C标准推荐方式</li><li>addEventListener() 它是一个方法</li><li>IE9之前的IE浏览器不支持此方法，可使用attachEvent()代替</li><li>特点: 同一个元素同一个事件可以注册多个监听器</li></ul><h3 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">addEventListener</span>(type, listener[, useCapture])<br></code></pre></td></tr></table></figure><p>eventTarget.addEventListener(type, listener[, useCapture]) 方法将指定的监听器注册到eventTarget 上，当该对象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><ul><li>type : 事件类型字符串，比如click、mouseover，<strong>注意这里不要带on</strong>，是字符串，带引号</li><li>listener ： 事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture : 可选函数，是一个布尔值，默认是false 。学完DOM事件流之后，再进一步学习</li></ul><h3 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent"></a>attachEvent</h3><p><strong>该特性非标准，请尽量不要在生产环境中使用它</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">eventTarget.attackEvent(eventNameWithon, callback)<br></code></pre></td></tr></table></figure><p>eventTarget.attackEvent方法将指定的监听器注册到eventTarget 上，当该对象触发指定的事件时，指定的回调函数将会被执行。</p><p>该方法接收两个参数：</p><ul><li>ventNameWithon ： 事件类型字符串，比如onclick，onmouseover， 这里要带on</li><li>callback : 事件处理函数，当目标触发事件时回调函数将被调用</li></ul><h3 id="注册事件的兼容性解决方案"><a href="#注册事件的兼容性解决方案" class="headerlink" title="注册事件的兼容性解决方案"></a>注册事件的兼容性解决方案</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">alertWarn</span> () &#123;</span><br><span class="language-javascript">        alert (<span class="hljs-string">&#x27;warning&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addEventListener</span>(<span class="hljs-params">element, eventName, fn</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//判断浏览器是否支持addEventListener方法</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) &#123;</span><br><span class="language-javascript">            element.<span class="hljs-property">addEventListener</span> (eventName, fn);   <span class="hljs-comment">//第三个参数，默认是false</span></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">attachEvent</span>) &#123;</span><br><span class="language-javascript">            element.<span class="hljs-property">attachEvent</span> (<span class="hljs-string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//相当于element.onclick = fn;</span></span><br><span class="language-javascript">            element[<span class="hljs-string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">addEventListener</span>(btn, <span class="hljs-string">&#x27;click&#x27;</span>, alertWarn);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h2><h3 id="删除事件的方式"><a href="#删除事件的方式" class="headerlink" title="删除事件的方式"></a>删除事件的方式</h3><ul><li>传统注册方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">eventTarget.onclick = null;<br></code></pre></td></tr></table></figure></li><li>方法监听注册方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">divs[1].addEventListener(&#x27;click&#x27;, alertWarn);<br>function alertWarn () &#123;<br>    alert(&#x27;warning&#x27;);<br>    divs[1].removeEventListener(&#x27;click&#x27;, alertWarn);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>attach 方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">divs[2].attachEvent(&#x27;onclick&#x27;, alertWarn1);<br>function alertWarn1 () &#123;<br>    alert(&#x27;warning&#x27;);<br>    divs[1].detachEvent(&#x27;click&#x27;, alertWarn1);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>兼容性方案<br>参考上面的注册事件的兼容性方式。</li></ul><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序。</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流。</p><p>包括三个阶段：</p><ol><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ol><p>注意:</p><ul><li>JS代码只能执行捕获或者冒泡其中的一个阶段</li><li>onclick 和 attachEvent 只能得到冒泡阶段</li><li>addEventListener (type, listener[, useCapture]) 第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false（不写默认就是false），表示在事件冒泡阶段电泳事件处理程序。</li><li>在实际开发中，我们很少使用事件捕获，我们更关注事件冒泡</li><li>有些事件是没有冒泡的，比如onblur、onfocus、onmouseover、onmouseleave</li><li>虽然事件冒泡有时候会带来麻烦，但是有时候又会巧妙的做某些事情，我们后面讲解</li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ul><li>event 就是一个事件对象，写道我们的侦听函数的小括号里面，当形参来看</li><li>事件对象只有有了事件才会存在，他是系统给我们自动创建的，不需要我们传递参数</li><li>事件对象是我们的事件的一系列相关数据的集合，比如鼠标点击里面就包含了鼠标的相关信息</li><li>这个事件对象我们可以自己命名，比如 event、evt 、e 等</li><li>事件对象也有兼容性问题。 IE 6、7、8通过 window.event 实现</li></ul><p>兼容性写法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">event = event || windoe.event;<br></code></pre></td></tr></table></figure></p><h3 id="事件对象常见的额属性和方法"><a href="#事件对象常见的额属性和方法" class="headerlink" title="事件对象常见的额属性和方法"></a>事件对象常见的额属性和方法</h3><div class="table-container"><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象  标准</td></tr><tr><td>e.scrElement</td><td>返回触发事件的对象  非标准 IE 6  7 8 使用</td></tr><tr><td>e.type</td><td>返回事件的类型，比如click、mouseover等，不带 on</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡，非标准，IE 6 7 8 使用</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件（默认行为）非标准 ，IE 6 7 8 使用，比如不让链接跳转</td></tr><tr><td>e.preventDefaule()</td><td>该方法阻止默认事件（默认行为）标准 ，比如不让链接跳转</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡，标准</td></tr></tbody></table></div><h3 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h3><p>this 返回的是绑定事件的对象（元素）</p><p>e.target 返回的是点击的那个对象，就是谁触发了这个事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var ul = document.querySelector(&#x27;ul&#x27;);<br>ul.addEventListener(&#x27;click&#x27;, function (e) &#123;<br>    console.log(this);<br>    console.log(e.target);<br>&#125;)<br><br>// &lt;ul&gt;...&lt;/ul&gt;<br>// &lt;li&gt;123&lt;/li&gt;<br></code></pre></td></tr></table></figure><h3 id="阻止对象默认行为"><a href="#阻止对象默认行为" class="headerlink" title="阻止对象默认行为"></a>阻止对象默认行为</h3><p>三种方法：</p><ul><li>e.preventDefaule();<br>是一个方法，适合普通浏览器</li><li>e.returnValue;</li><li>是一个属性，适用于 IE 6 7 8</li><li>return false;<br>没有兼容性问题，但是需要注意后面的语句就不执行了，直接跳出</li></ul><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><ul><li>event.stopPropagation();    // 一般浏览器停止冒泡</li><li>event.cancelBubble;         // IE 6 7 8 的停止冒泡</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);<br><span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);<br>father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, alertName, <span class="hljs-literal">false</span>);<br>son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, alertName, <span class="hljs-literal">false</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;document&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">alertName</span> (event) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>));<br>    event.<span class="hljs-title function_">stopPropagation</span>();    <span class="hljs-comment">// 停止冒泡</span><br>    event.<span class="hljs-property">cancelBubble</span>;         <span class="hljs-comment">// IE 6 7 8 的停止冒泡</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件委托（代理、委派）"><a href="#事件委托（代理、委派）" class="headerlink" title="事件委托（代理、委派）"></a>事件委托（代理、委派）</h2><h3 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h3><p>事件委托的原理：不给每个子节点单独设置事件监听器，而是设置在其父节点上，然后利用冒泡原理设置每个子节点。</p><p><strong>例如：</strong>给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li ，然后事件冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><h3 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h3><p>只操作了一次 DOM ，提高了程序的性能。</p><h2 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h2><div class="table-container"><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;);<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区域的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区域的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+ 支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+ 支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table></div><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例:"></a>案例:</h3><p>跟随鼠标的小鸟:</p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ul><li>鼠标不断的移动,使用鼠标移动事件: mousemove</li><li>在页面中移动,所以给 document 注册事件</li><li>图片要移动距离,而且不占位置,我们使用绝对定位即可</li><li>核心原理,每次鼠标移动,我们都会获得最新的鼠标坐标,把这个 X 和 Y 的坐标做为图片的 top 和 left 值就可以移动图片</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跟随鼠标的小鸟<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bird.gif&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> image = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 只要鼠标移动，就会触发这个事件</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// top 和 left 一定要加 px</span></span><br><span class="language-javascript">            image.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x - <span class="hljs-number">20</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">            image.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y - <span class="hljs-number">20</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><h3 id="常用键盘事件-1"><a href="#常用键盘事件-1" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h3><div class="table-container"><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发（松开的时候触发）</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发（按下之后一直触发）</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发（按下之后一直触发），但是它不能识别功能键，比如 ctrl、shift 等</td></tr></tbody></table></div><p>当按下的时候，keydown 执行在 keypress 之前。</p><h2 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h2><div class="table-container"><table><thead><tr><th>键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回该键的 ASCII 值</td></tr></tbody></table></div><p><strong>注意：</strong></p><ul><li>keyup 和 keydown 事件不区分字母大小写， a 和 A 得到的都是65</li><li>keypress 区分大小写，a 得到的是97，A 得到的是 65</li></ul><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1:"></a>案例1:</h3><p>京东按下 s 键定位到搜索框:</p><p>检测用户是否按下了 s 键盘，如果按下 s 键，就把光标定位到搜索框里面。</p><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ul><li>利用键盘事件对象里面的 keyCode 判断用户是否按下的是 s 键</li><li>搜索框获得焦点的方法: 利用 js 里面的 focus() 方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>京东搜索框<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">                input.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2:"></a>案例2:</h3><p>快递单号查询:</p><p>查询快递单号的时候，上面一个更大的盒子显示同样的内容（这里的字号更大）。</p><!-- ![快递单号查询](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212172358159.png) --><p><img src="https://picgo.chongqing0111.top/images/202212172358159.png" alt="快递单号查询"></p><h4 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h4><ul><li>表单检测用户输入：给表单添加键盘事件</li><li>同时把快递单号里面的值（value）获取过来赋值给 con 盒子（innerText）作为内容</li><li>当失去焦点的时候，就隐藏这个 con 盒子。</li><li>当获得焦点的时候，如果快递单号里面不为空，就显示 con 盒子。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.search</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">178px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.con</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: -<span class="hljs-number">40px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">171px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.con</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">28px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">8px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-style</span>: solid dashed dashed;</span><br><span class="language-css">        <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#fff</span> transparent transparent;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入您的快递单号&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> con = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.con&#x27;</span>);</span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">            con.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            con.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            con.<span class="hljs-property">innerText</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">// 当失去焦点的时候，就隐藏这个 con 盒子。</span></span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        con.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">// 当获得焦点的时候，如果内容不为空，就显示这个 con 盒子。</span></span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">            con.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>keydown 和 keypress 触发的时候，文字还没有落入文本框中。</p><p>keyup 触发的时候，文字已经输入到文本框中。</p><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="BOM导读"><a href="#BOM导读" class="headerlink" title="BOM导读"></a>BOM导读</h2><p>BOM(Brower Object Model) 即<strong>浏览器对象模型</strong>，它提供了独立于内容而与<strong>浏览器窗口进行交互的对象</strong>，其核心对象是window。</p><p>BOM 是由一系列相关的对象构成，并且每个对象都提供了很多方法和属性。</p><p>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是 Netscape 浏览器标准的一部分。每个浏览器都有自己的标准。</p><h2 id="BOM-的组成："><a href="#BOM-的组成：" class="headerlink" title="BOM 的组成："></a>BOM 的组成：</h2><p>BOM 比 DOM 更大，它包括 DOM。</p><!-- ![image-20221218153312293](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212181533444.png) --><p><img src="https://picgo.chongqing0111.top/images/202212181533444.png" alt="image-20221218153312293"></p><p>window 对象是浏览器的顶级对象，它具有双重角色。</p><ul><li>它是 JS 访问浏览器窗口的一个接口。</li><li>它是一个全局对象，定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。</li></ul><p>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt() 等。</p><h2 id="window-对象的常见事件"><a href="#window-对象的常见事件" class="headerlink" title="window 对象的常见事件"></a>window 对象的常见事件</h2><h3 id="窗口加载事件"><a href="#窗口加载事件" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h3><h4 id="窗口加载事件-1"><a href="#窗口加载事件-1" class="headerlink" title="窗口加载事件"></a>窗口加载事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>或者<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></td></tr></table></figure><p>window.onload 是窗口（页面）加载事件，当文档内容完全加载完成后会触发该事件（包括图像、脚本文件、CSS文件等）。</p><p>window.onload 只能写一次，当写了很多个的时候，只有最后一个起作用， 所以推荐第二种写法。</p><h4 id="DOM加载事件"><a href="#DOM加载事件" class="headerlink" title="DOM加载事件"></a>DOM加载事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></td></tr></table></figure><p>这个事件当 DOM 加载完成时触发，不包含 CSS、图片、flash 等。</p><p>IE9+ 支持。</p><h3 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>或者<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></td></tr></table></figure><p>这是调整窗口大小的时候的触发事件。包括窗口高度和宽度。</p><p>经常用来实现响应式布局。 window.inner.width 当前屏幕的宽度</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>window 对象提供了2个好用的方法——定时器：</p><ul><li>setTimeout()</li><li>setInterval()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(调用函数， [延迟的毫秒数])；<br></code></pre></td></tr></table></figure><ul><li>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</li><li>这个 window 在调用的时候可以省略。</li><li>这个延时时间单位是毫秒，可以省略，如果省略默认是0。</li><li>这个调用函数可以直接写函数，还可以写函数名，<strong>函数名后面不写括号</strong>。</li><li>页面中可能有很多的定时器，我们经常给定时器加标识符（名字）。</li></ul><h3 id="停止-setTimeout-定时器"><a href="#停止-setTimeout-定时器" class="headerlink" title="停止 setTimeout() 定时器"></a>停止 setTimeout() 定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearTimeout</span>(timeoutID)<br></code></pre></td></tr></table></figure><ul><li>window 可以省略</li><li>里面的参数是定时器的标识符</li></ul><h3 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(调用函数， [延迟的毫秒数])；<br></code></pre></td></tr></table></figure><p>setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><h3 id="倒计时效果"><a href="#倒计时效果" class="headerlink" title="倒计时效果"></a>倒计时效果</h3><p>分析：</p><ul><li>这个倒计时是不断变化的，所以使用 setInterval() 来实现</li><li>三个黑色盒子里面分别放时分秒</li><li>三个黑子盒子的利用 innerHTML 放入计算的小时分钟秒数</li><li>第一次之前也是间隔一定的毫秒数，所以在定时器的前面先调用一下刷新时间的函数，防止第一次刷新之前有空白</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hour&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;minute&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;second&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> hour = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.hour&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> minute = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.minute&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> second = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.second&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2019-9-22 18:00:00&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 在定时器获取之前，先运行一次，这样不会显示原始默认的1 2 3</span></span><br><span class="language-javascript">    <span class="hljs-title function_">getInterval</span>();</span><br><span class="language-javascript">    <span class="hljs-comment">// 每秒钟获取一次事件</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(getInterval, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInterval</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> interval = (inputTime - nowTime) / <span class="hljs-number">1000</span>;     <span class="hljs-comment">//两个日期相差的秒数</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> hours, minutes, seconds;</span><br><span class="language-javascript">            hours =  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(interval / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);</span><br><span class="language-javascript">            hours = hours &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hours : hours;</span><br><span class="language-javascript">            hour.<span class="hljs-property">innerHTML</span> = hours;</span><br><span class="language-javascript">            minutes =  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(interval / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);</span><br><span class="language-javascript">            minutes = minutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minutes : minutes;</span><br><span class="language-javascript">            minute.<span class="hljs-property">innerHTML</span> = minutes;</span><br><span class="language-javascript">            seconds =  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(interval % <span class="hljs-number">60</span>);</span><br><span class="language-javascript">            seconds = seconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + seconds : seconds;</span><br><span class="language-javascript">            second.<span class="hljs-property">innerHTML</span> = seconds;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(intervalID)；<br></code></pre></td></tr></table></figure><ul><li>window 可以省略</li><li>里面的参数是定时器的标识符</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;begin&quot;</span>&gt;</span>开始定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>结束定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> begin = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.begin&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> stop = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.stop&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">//全局变量，null 是一个空对象</span></span><br><span class="language-javascript">        begin.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好啊&#x27;</span> + i);</span><br><span class="language-javascript">                i = i + <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        stop.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="发送短信案例"><a href="#发送短信案例" class="headerlink" title="发送短信案例"></a>发送短信案例</h3><p>点击发送验证码之后，该按钮在60秒只能不能再被点击，防止重复发送短信</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>点击按钮之后，将按钮禁用，disable 为 true</li><li>一秒钟修改一次 button 里面的内容</li><li>定义一个变量为秒数，这个数值定时变化，如果为0，说明时间到，按钮恢复原始状态</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    手机号码：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> i = <span class="hljs-number">60</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="language-javascript">                    btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;发送验证码&#x27;</span>;</span><br><span class="language-javascript">                    i = <span class="hljs-number">60</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    btn.<span class="hljs-property">innerHTML</span> = i + <span class="hljs-string">&#x27;秒之后可以再次点击&#x27;</span>;</span><br><span class="language-javascript">                    i--;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="this-的指向问题"><a href="#this-的指向问题" class="headerlink" title="this 的指向问题"></a>this 的指向问题</h3><p>this 的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定 this 到底指向谁，一般情况下 this 的最终指向的是那个调用它的对象。</p><h2 id="JS-执行队列"><a href="#JS-执行队列" class="headerlink" title="JS 执行队列"></a>JS 执行队列</h2><p>JS 的一大特点就是单线程，也就是说，同一时间只能做一件事，这是因为 JS这门语言诞生的使命导致的—— JS 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。应该先添加，然后再删除。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是：如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了 <strong>同步</strong> 和 <strong>异步</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>运行结果是 1  2  3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    &#125;, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>运行结果是 1  2  3</p><p><strong>同步任务</strong>：同步任务都在主线程上执行，形成一个执行栈。</p><p><strong>异步任务</strong>： JS 的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型：</p><ol><li>普通事件：如click、resize 等</li><li>资源加载，如load、error 等</li><li>定时器，包括setInterval、setTimeout 等</li></ol><p>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</p><h3 id="JS-的执行机制"><a href="#JS-的执行机制" class="headerlink" title="JS 的执行机制"></a>JS 的执行机制</h3><ol><li>先执行执行栈中的同步任务。</li><li>异步任务（回调函数）放入任务队列中。</li><li>一旦执行栈中所有同步任务完成，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><p>由于主现程不断地重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为<strong>事件循环（evwnt loop）</strong>。</p><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的URL，并且可以用于解析URL。因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（Uniform Resource Locator，URL）是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p>URL 的一般语法结构为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">porotocol：//host[:port]/path/[?query]#fragment<br>http://www.itcast.cn/index.html?name=andy&amp;age=18#link<br></code></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议，常用的http、ftp、maito等</td></tr><tr><td>host</td><td>主机（域名）</td></tr><tr><td>port</td><td>端口号，可选，省略时使用默认断开，如http的默认端口80</td></tr><tr><td>path</td><td>路径，由零或多个“/”格开的字符串，一般用来表示主机上的一个目录或者文件地址</td></tr><tr><td>query</td><td>参数，以键值对的形式，通过符号 &amp; 分割开来</td></tr><tr><td>fragment</td><td>片段，# 后面的内容常见于链接，锚点</td></tr></tbody></table></div><h3 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h3><div class="table-container"><table><thead><tr><th>location 对象属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.href</td><td>获取或者设置整个 URL</td></tr><tr><td>location.host</td><td>返回主机（域名）</td></tr><tr><td>location.port</td><td>返回端口号，如果未写返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.search</td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段，# 后面内容，常见于链接、锚点</td></tr></tbody></table></div><h4 id="5秒钟之后自动跳转页面"><a href="#5秒钟之后自动跳转页面" class="headerlink" title="5秒钟之后自动跳转页面"></a>5秒钟之后自动跳转页面</h4><p>案例分析：</p><ul><li>利用定时器做倒计时效果</li><li>location.href 跳转页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>将在5秒钟之后跳转到首页！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">5000</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="获取-URL-参数数据"><a href="#获取-URL-参数数据" class="headerlink" title="获取 URL 参数数据"></a>获取 URL 参数数据</h4><p>主要练习数据在不同页面之间的传递</p><p>案例分析：</p><ul><li>第一个登陆页面，里面有提交表单，action 提交到 index.html 页面</li><li>第二个页面可以使用第一个页面的参数，利用了 location.search 参数</li><li>截取字符串用 substr</li><li>分隔符，将 = 前后的分隔开</li></ul><p>login.html :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>index.html :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// substr(起始位置, 截取几个字符)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> params = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = params.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;欢迎您！会员&#x27;</span> + arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;！&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="location-常见方法"><a href="#location-常见方法" class="headerlink" title="location 常见方法"></a>location 常见方法</h3><div class="table-container"><table><thead><tr><th>location 对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟 href 一样，可以跳转页面</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者 F5，如果参数为true，强制刷新 ctrl + F5</td></tr></tbody></table></div><h2 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h2><p>navigator对象包含有关浏览器的信息，它有很多属性，我们最常用的是userAgent，该属性可以返回由客户机发送服务器的useragent头部的值。</p><h2 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><div class="table-container"><table><thead><tr><th>history 对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数如果是1，前进一个页面，如果是-1，后退一个页面</td></tr></tbody></table></div><p>history 对象在一般的实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
            <tag> DOM </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端300+实用工具分享【转载】</title>
      <link href="/2022/12/15/%E5%89%8D%E7%AB%AF300+%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91/"/>
      <url>/2022/12/15/%E5%89%8D%E7%AB%AF300+%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91/</url>
      
        <content type="html"><![CDATA[<!-- 本文内容来自B站UP主[@技术胖](https://space.bilibili.com/165659472)的视频：[前端老司机 300+实用工具分享](https://www.bilibili.com/video/BV1ke4y1v7Xd/)> 我觉得挺有用的就想看看具体内容，谁知道那个B`Gitee`里面的Markdown文件提示违规无法查看，于是我就下载下来放到博客上面方便阅读和以后查询。  > 若造成侵权请联系我进行删除。[](#Javascript "Javascript")Javascript--------------------------------------### [](#工具 "工具")工具查看详情*   Underscore.js      一套完善的函数式编程的接口，更方便地在JavaScript中实现函数式编程      [https://underscorejs.org/](https://underscorejs.org/)*   fastclick      用于消除物理点击和click移动浏览器上事件触发之间的 300 毫秒延迟      [https://github.com/ftlabs/fastclick](https://github.com/ftlabs/fastclick)*   Lodash      一致性、模块化、高性能的 JavaScript 实用工具库      [https://lodash.com/](https://lodash.com/)*   crypto-js      加密标准的 JavaScript 库。      [https://github.com/brix/crypto-js](https://github.com/brix/crypto-js)*   zxcvbn      JavaScript密码强度估算库      [https://github.com/dropbox/zxcvbn](https://github.com/dropbox/zxcvbn)*   zxcvbn-ts      支持Typescript的密码强度估算库      [https://github.com/zxcvbn-ts/zxcvbn](https://github.com/zxcvbn-ts/zxcvbn)*   clipboard.js      将文本复制到剪贴板的轻量级JS 库      [https://clipboardjs.com/](https://clipboardjs.com/)*   tesseract.js      Javascript的OCR引擎，在浏览器离线识别图片中的文字      [https://tesseract.projectnaptha.com/](https://tesseract.projectnaptha.com/)*   number-precision      小而快的库，用于精确地进行加法、减法、乘法和除法运算      [https://github.com/nefe/number-precision](https://github.com/nefe/number-precision)*   fingerprintjs      具有高准确度和稳定性的浏览器指纹库      [https://fingerprint.com/](https://fingerprint.com/)*   ViteShot      基于Vite的快速简单的截图工具。      [https://viteshot.com/](https://viteshot.com/)*   Valine      快速、简洁且高效的无后端评论系统      [https://valine.js.org/](https://valine.js.org/)*   cnpm      淘宝提供的一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步      [https://npmmirror.com/](https://npmmirror.com/)*   yarn      快速、可靠和安全的依赖管理      [https://yarnpkg.com/](https://yarnpkg.com/)*   responsively-app      一种改进的 Web 浏览器，有助于响应式 Web 开发。Web 开发人员必须拥有开发工具      [https://responsively.app/](https://responsively.app/)*   javascript-obfuscator      功能强大的免费 JavaScript 混淆器，包含多种功能，可为源代码提供保护      [https://obfuscator.io/](https://obfuscator.io/)*   Nano ID      小巧的、安全的、URL 友好的、独特的 JavaScript 字符串 唯一 ID 生成器      [https://zelark.github.io/nano-id-cc/](https://zelark.github.io/nano-id-cc/)*   spy-debugger      一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备      [https://www.npmjs.com/package/spy-debuggerdebugger](https://www.npmjs.com/package/spy-debuggerdebugger)*   fuite      用于查找 Web 应用程序中的内存泄漏的工具      [https://github.com/nolanlawson/fuite](https://github.com/nolanlawson/fuite)*   qs      查询字符串解析和字符串化库      [https://github.com/ljharb/qs](https://github.com/ljharb/qs)*   js-cookie      用于处理 cookie 的简单、轻量级 JavaScript API      [https://github.com/js-cookie/js-cookie](https://github.com/js-cookie/js-cookie)*   tinymce      排名第一的可定制、可扩展和灵活的富文本编辑器      [https://www.tiny.cloud/](https://www.tiny.cloud/)*   html2canvas      允许在用户浏览器上对网页或其部分进行“截图”      [https://html2canvas.hertzen.com/](https://html2canvas.hertzen.com/)*   shepherd      引导用户浏览您的应用      [https://shepherdjs.dev/](https://shepherdjs.dev/)*   tinykeys      极小的键盘事件监听库      [https://jamiebuilds.github.io/tinykeys/](https://jamiebuilds.github.io/tinykeys/)*   ag-grid      用于构建企业应用程序的最佳 JavaScript 数据表      [https://www.ag-grid.com/](https://www.ag-grid.com/)*   tui.calendar      功能齐全的 JavaScript 日程表      [https://ui.toast.com/tui-calendar](https://ui.toast.com/tui-calendar)*   screenfull      用于跨浏览器使用 JavaScript Fullscreen API 的简单包装器      [https://sindresorhus.com/screenfull/](https://sindresorhus.com/screenfull/)*   Fuse.js      JavaScript 中的轻量级模糊搜索      [https://fusejs.io/](https://fusejs.io/)*   i18next      用于浏览器或任何其他 javascript 环境（例如 Node.js、Deno）的国际化框架      [https://www.i18next.com/](https://www.i18next.com/)*   JsBarcode      适用于 Web 和 Node.js 的易于使用但功能强大的条形码生成器      [https://lindell.me/JsBarcode/](https://lindell.me/JsBarcode/)*   path-to-regexp      将 `/user/:name` 等路径字符串转换为正则表达式      [https://github.com/pillarjs/path-to-regexp](https://github.com/pillarjs/path-to-regexp)*   await-to-js      异步等待包装器，无需 try-catch 即可轻松处理错误      [https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/](https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/)*   md5      用 MD5 散列消息的 JavaScript 函数      [https://github.com/pvorb/node-md5](https://github.com/pvorb/node-md5)*   mitt.js      它足够小，仅有200bytes，其次支持全部事件的监听和批量移除，替代EventBus      [https://npm.im/mitt](https://npm.im/mitt)*   js-spark-md5      MD5 算法的快速 md5 实现      [https://github.com/satazor/js-spark-md5](https://github.com/satazor/js-spark-md5)*   nano      小型（130 字节）、安全、URL 友好、唯一的 JavaScript 字符串 ID 生成器      [https://zelark.github.io/nano-id-cc/](https://zelark.github.io/nano-id-cc/)*   jsPDF      用 JavaScript 生成 PDF      [https://parall.ax/products/jspdf](https://parall.ax/products/jspdf)*   ua-parser-js      从User-Agen中检测浏览器、引擎、操作系统、CPU 和设备类型/型号，占用空间相对较小（压缩后约 17KB，压缩后约 6KB），支持浏览器和 node.js 环境      [http://faisalman.github.io/ua-parser-js/](http://faisalman.github.io/ua-parser-js/)*   togetherjs      网站添加实时协作功能的JavaScript库，两个人可以在同一页面上进行交互，查看彼此的光标、编辑并一起浏览网站      [https://togetherjs.com/](https://togetherjs.com/)*   Clusterize.js      开源的长列表渲染库，轻量级的原生大数据量展示      [https://clusterize.js.org/](https://clusterize.js.org/)*   crypto-js-wasm      加密标准的 javascript 库，比 crypto-js快16 倍      [https://github.com/originjs/crypto-js-wasm](https://github.com/originjs/crypto-js-wasm)*   pdfkit      用于 Node 和浏览器的 JavaScript PDF 生成库      [http://pdfkit.org/](http://pdfkit.org/)*   zx      使用js编写更便捷shell脚本      [https://www.npmjs.com/package/zx](https://www.npmjs.com/package/zx)*   NProgress.js      适用于应用程序的进度条，受 Google、YouTube 和 Medium 的启发      [https://ricostacruz.com/nprogress/](https://ricostacruz.com/nprogress/)### [](#可视化 "可视化")可视化查看详情*   highlight.js      JavaScript 语法高亮器，具有语言自动检测和零依赖项      [https://highlightjs.org/](https://highlightjs.org/)*   Drawflow      创建简单的流程库      [https://jerosoler.github.io/Drawflow/](https://jerosoler.github.io/Drawflow/)*   tui.image-editor      HTML5 Canvas 的全功能图像编辑器。它易于使用并提供强大的过滤器      [https://ui.toast.com/tui-image-editor](https://ui.toast.com/tui-image-editor)*   viewerjs      JavaScript 图像查看器      [https://fengyuanchen.github.io/viewerjs/](https://fengyuanchen.github.io/viewerjs/)*   prism.js      轻量级、健壮、优雅的语法高亮库      [https://prismjs.com/](https://prismjs.com/)*   fabric.js      功能强大且简单的 Canvas库，轻松处理 HTML5 画布元素。是画布元素之上的交互式对象模型，也是一个SVG-to-canvas 解析器      [http://fabricjs.com/](http://fabricjs.com/)*   fullPage.js      用于创建全屏滚动网站（也称为单页网站或一页网站），并在该网站的各个部分内添加横向滑块      [https://alvarotrigo.com/fullPage/](https://alvarotrigo.com/fullPage/)*   opentype.js      OpenType 和 TrueType 字体解析器和编写器。它允许您从浏览器或 node.js访问文本的字母形式      [https://opentype.js.org/](https://opentype.js.org/)*   icones.js      具有即时搜索功能的图标资源管理器，由 Iconify 提供支持      [https://icones.js.org/](https://icones.js.org/)*   reveal.js      创建功能齐全且精美的演示文稿      [https://revealjs.com/](https://revealjs.com/)*   carbon      创建和共享源代码的精美图像      [https://carbon.now.sh/](https://carbon.now.sh/)*   lucky-canvas      基于 TS + Canvas 开发的【大转盘 / 九宫格 / 老虎机】抽奖插件， 一套源码适配多端框架 JS / Vue / React / Taro / UniApp / 微信小程序等      [https://100px.net/](https://100px.net/)*   Darkmode.js      在几秒钟内为您的网站添加暗模式/夜间模式      [https://darkmodejs.learn.uno/?_360safeparam=8406218](https://darkmodejs.learn.uno/?_360safeparam=8406218)*   ECharts      强大的交互式图表和浏览器数据可视化库      [https://echarts.apache.org/zh/index.html](https://echarts.apache.org/zh/index.html)*   PixiJS      使用最快，最灵活的2D WebGL渲染器创建精美的内容      [https://pixijs.com/](https://pixijs.com/)*   AntV - G2      数据驱动，高度易用，可扩展的可视化图形语法。      [https://g2plot.antv.vision/zh/](https://g2plot.antv.vision/zh/)*   ApexCharts.js      基于SVG的JavaScript图表库，可使用简单的API构建交互式图表和可视化文件*   OpenLayers      高性能，功能丰富的库，用于在Web上创建交互式地图。它可以显示从任何网页上的任何来源加载的地图图块，矢量数据和标记      [https://openlayers.org/](https://openlayers.org/)*   Two.js      面向现代Web浏览器的二维绘图api，渲染不可知实现相同的API在多种环境中得出：svg，canvas，和webgl      [https://two.js.org/](https://two.js.org/)*   Paper.js      基于HTML5 Canvas的矢量图形的图形库      [http://paperjs.org/](http://paperjs.org/)*   Panolens.js      事件驱动的基于WebGL的全景查看器。轻巧而灵活。它建立在Three.JS之上      [https://pchen66.github.io/Panolens/](https://pchen66.github.io/Panolens/)*   A-Frame      用于构建 3D/AR/VR 体验的 Web 框架      [https://aframe.io/](https://aframe.io/)*   mermaid-js      以与 Markdown 类似的方式从文本生成图表和流程图      [https://mermaid-js.github.io/mermaid/](https://mermaid-js.github.io/mermaid/)*   mo · js      为网站添加基于JavaScript的动态图形      [https://mojs.github.io/](https://mojs.github.io/)*   trianglify      Javascript 库，用于创建独特的、美观的三角形图案      [http://qrohlf.com/trianglify/](http://qrohlf.com/trianglify/)*   Babylon.js      能强大、美观、简单、开放的游戏和渲染引擎      [https://www.babylonjs.com/](https://www.babylonjs.com/)*   Oasis Engine      高性能 Web 蚂蚁图形引擎      [https://oasisengine.cn/](https://oasisengine.cn/)*   Butterfly      基于JS的数据驱动的节点式编排组件库      [https://butterfly-dag.gitee.io/butterfly-dag/home](https://butterfly-dag.gitee.io/butterfly-dag/home)*   image-optimizer      使用 Electron、Vue 和 Vite 用于优化图像和矢量图形的免费开源工具      [https://github.com/antonreshetov/image-optimizer](https://github.com/antonreshetov/image-optimizer)*   Sketchfab      需任何插件即可在Web页面里嵌入交互式3D模型      [https://sketchfab.com/](https://sketchfab.com/)*   vConsole      用于移动网页的轻量级、可扩展的前端开发工具      [https://github.com/Tencent/vConsole](https://github.com/Tencent/vConsole)*   swiper      免费且最现代的移动触摸滑块，具有硬件加速过渡和惊人的原生行为      [https://swiperjs.com/](https://swiperjs.com/)*   Slidev      面向开发人员的演示幻灯片      [https://sli.dev/](https://sli.dev/)*   konva      HTML5 Canvas JavaScript 框架，它支持桌面和移动应用程序的高性能动画、过渡、节点嵌套、分层、过滤、缓存、事件处理等等      [https://konvajs.org/](https://konvajs.org/)*   p5.j​​s      开源的JavaScript可视化库，processing的js实现版本      [https://p5js.org/zh-Hans/](https://p5js.org/zh-Hans/)*   cesium      用于世界级 3D 地球仪和地图的开源 JavaScript 库      [https://cesium.com/platform/cesiumjs/](https://cesium.com/platform/cesiumjs/)*   driver.js      一个轻量级、无依赖的用户引导组件      [https://kamranahmed.info/driver.js/](https://kamranahmed.info/driver.js/)*   vanilla-tilt.js      平滑的 3D 倾斜 JavaScript 库      [https://micku7zu.github.io/vanilla-tilt.js/index.html](https://micku7zu.github.io/vanilla-tilt.js/index.html)*   parallax.js      对智能设备的方向引擎响应的视差      [http://matthew.wagerfield.com/parallax/](http://matthew.wagerfield.com/parallax/)*   signature_pad      基于 HTML5 canvas 的平滑签名绘制      [http://szimek.github.io/signature_pad/](http://szimek.github.io/signature_pad/)*   compressorjs      JavaScript 图像压缩器      [https://fengyuanchen.github.io/compressorjs/](https://fengyuanchen.github.io/compressorjs/)*   eva.js      用于创建交互式游戏项目的前端游戏引擎      [https://eva.js.org/](https://eva.js.org/)*   d3      基于数据来操作文档的JavaScript库      [https://d3js.org/](https://d3js.org/)### [](#动画插件 "动画插件")动画插件查看详情*   countUp.js      无依赖项的轻量级Javascript类，可用于快速创建以更有趣的方式显示数字数据的动画      [https://inorganik.github.io/countUp.js/](https://inorganik.github.io/countUp.js/)*   impress.js      CSS3 转换和过渡的强大功能的演示框架      [https://impress.js.org/](https://impress.js.org/)*   Anime.js      轻量级的 JavaScript 动画库，具有简单而强大的 API      [https://animejs.com/](https://animejs.com/)*   tween.js      用于简单动画的 JavaScript 补间引擎，包含优化的 Robert Penner 方程      [http://tweenjs.github.io/tween.js/](http://tweenjs.github.io/tween.js/)*   Popmotion      制作数字、颜色和复杂字符串的动画。该库的主要动画功能只有5kb左右，整个库的容量在12kb左右      [https://popmotion.io/](https://popmotion.io/)*   Typed.js      打字动画库      [https://mattboldt.com/demos/typed-js/](https://mattboldt.com/demos/typed-js/)*   vivus.js      在 SVG 上制作绘图动画的 JavaScript 库      [https://maxwellito.github.io/vivus/](https://maxwellito.github.io/vivus/)*   ScrollReveal      在元素滚入或滚出视口时为其制作动画      [https://scrollrevealjs.org/](https://scrollrevealjs.org/)*   canvas-confetti      按需 五彩纸屑      [https://catdad.github.io/canvas-confetti/](https://catdad.github.io/canvas-confetti/)*   GSAP      强大的 JavaScript 工具集，构建适用于所有主流浏览器的高性能动画。动画 CSS、SVG、画布、React、Vue、WebGL、颜色、字符串、运动路径、通用对象      [https://greensock.com/](https://greensock.com/)*   lax.js      轻量级（<4kb gzipped）香草 JavaScript 库，可在您滚动时创建流畅美观的动画      [https://github.com/alexfoxy/lax.js](https://github.com/alexfoxy/lax.js)*   animxyz      AnimXYZ 可帮助您为您的网站创建、自定义和组合动画      [https://animxyz.com/](https://animxyz.com/)*   svg.js      用于操作和动画 SVG 的轻量级库      [https://svgjs.dev/docs/3.0/](https://svgjs.dev/docs/3.0/)*   zdog      用于画布和 SVG 的扁平、圆形、设计师友好的伪 3D 引擎      [https://zzz.dog/](https://zzz.dog/)*   dynamics.js      用于创建基于物理的动画的 JavaScript 库      [http://dynamicsjs.com/](http://dynamicsjs.com/)*   Proton      Javascript粒子动画库      [https://drawcall.github.io/Proton/](https://drawcall.github.io/Proton/)### [](#文件操作 "文件操作")文件操作查看详情*   SheetJS      可读取和导出excel的工具库，功能强大，支持格式众多，支持xls、xlsx、ods(一种OpenOffice专有表格文件格式)等十几种格式      [https://sheetjs.com/](https://sheetjs.com/)*   revogrid      具有高级定制功能的强大虚拟数据表格      [https://revolist.github.io/revogrid/](https://revolist.github.io/revogrid/)*   FileSaver.js      客户端保存文件的解决方案      [https://eligrey.com/blog/saving-generated-files-on-the-client-side/](https://eligrey.com/blog/saving-generated-files-on-the-client-side/)*   jszip      使用 Javascript 创建、读取和编辑 .zip 文件      [https://stuk.github.io/jszip/](https://stuk.github.io/jszip/)*   Print.js      帮助从网络打印的小型 javascript 库      [https://printjs.crabbly.com/](https://printjs.crabbly.com/)*   mammoth.js      将 Word 文档（.docx 文件）转换为 HTML      [https://github.com/mwilliamson/mammoth.js](https://github.com/mwilliamson/mammoth.js)*   StreamSaver.js      直接异步将流写入文件系统，适合大文件下载      [https://jimmywarting.github.io/StreamSaver.js/example.html](https://jimmywarting.github.io/StreamSaver.js/example.html)*   PDF.js      使用 HTML5 构建的可移植文档格式 (PDF) 查看器      [https://github.com/mozilla/pdf.js](https://github.com/mozilla/pdf.js)*   pdfmake      用于服务器端和客户端的 PDF 文档生成库      [http://pdfmake.org/](http://pdfmake.org/)*   pdf-lib      在任何 JavaScript 环境中创建和修改 PDF 文档      [https://pdf-lib.js.org/](https://pdf-lib.js.org/)*   uppy      JavaScript 文件上传器      [https://uppy.io/](https://uppy.io/)### [](#音视频 "音视频")音视频查看详情*   moovie.js      专注于电影的 HTML5 播放器      [https://mooviejs.com/](https://mooviejs.com/)*   meyda.js      JavaScript 音频特征提取库      [https://meyda.js.org/](https://meyda.js.org/)*   howler.js      Javascript 音频库      [https://howlerjs.com/](https://howlerjs.com/)*   flv.js      HTML5 FLV 播放器      [https://github.com/Bilibili/flv.js/](https://github.com/Bilibili/flv.js/)*   plyr      HTML5、YouTube 和 Vimeo 播放器      [https://plyr.io/](https://plyr.io/)*   xgplayer 西瓜播放器      网络视频和音频播放器库      [https://h5player.bytedance.com/](https://h5player.bytedance.com/)*   hls.js      可在支持 MSE 的浏览器中播放 HLS      [https://hls-js.netlify.app/demo/](https://hls-js.netlify.app/demo/)### [](#智能化 "智能化")智能化查看详情*   tensorflow.js      用于在浏览器和 Node.js 训练和部署机器学习模型      [https://tensorflow.google.cn/](https://tensorflow.google.cn/)*   face-api.js      用于在浏览器和 nodejs 中使用 tensorflow.js 进行人脸检测和人脸识别的 JavaScript API      [https://github.com/justadudewhohacks/face-api.js/](https://github.com/justadudewhohacks/face-api.js/)*   tracking.js      将不同的计算机视觉算法和技术引入浏览器环境。通过使用现代HTML5规范，我们使您能够进行实时颜色跟踪，人脸检测等      [https://trackingjs.com/](https://trackingjs.com/)*   pose-animator      识别出人类的表情变化和肢体动作，并将其映射到2D矢量图型上      [https://github.com/yemount/pose-animator](https://github.com/yemount/pose-animator)*   ar-cutpaste      手机上预装工具，对着目标物体拍摄，即可将图像复制粘贴进 Photoshop      [https://github.com/cyrildiagne/ar-cutpaste](https://github.com/cyrildiagne/ar-cutpaste)*   imgcook      专注以 Sketch、PSD、静态图片等形式的视觉稿作为输入，通过智能化技术一键生成可维护的前端代码      [https://www.imgcook.com/](https://www.imgcook.com/)*   nsfwjs      帮助快速识别不合时宜的图像      [https://nsfwjs.com/](https://nsfwjs.com/)### [](#编辑器 "编辑器")编辑器查看详情*   Vditor      Markdown 编辑器，支持所见即所得、即时渲染（类似 Typora）和分屏预览模式，由 TypeScript 实现，支持原生 JavaScript、Vue、React、Angular，提供桌面版      [https://b3log.org/vditor/](https://b3log.org/vditor/)*   monaco-editor      为VS Code提供支持的代码编辑器      [https://microsoft.github.io/monaco-editor/](https://microsoft.github.io/monaco-editor/)*   bytemd      用 Svelte 构建的 Markdown 编辑器组件。它也可以用于其他库/框架，例如 React、Vue 和 Angular      [https://bytemd.netlify.app/](https://bytemd.netlify.app/)*   wangEditor      Typescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费      [https://www.wangeditor.com/](https://www.wangeditor.com/)*   mavonEditor      Markdown 编辑器，支持多种个性化功能      [http://www.mavoneditor.com/](http://www.mavoneditor.com/)*   quill      API 驱动的富文本编辑器      [https://quilljs.com/](https://quilljs.com/)*   codemirror5      浏览器内代码编辑器      [https://codemirror.net/](https://codemirror.net/)*   marked      用于解析 Markdown 的编译器      [https://marked.js.org/](https://marked.js.org/)*   tiptap      完全控制文本编辑器体验。它是可定制的，带有大量扩展，是开源的，并且有大量的文档      [https://tiptap.dev/](https://tiptap.dev/)### [](#2D-3D "2D 3D")2D 3D查看详情*   dat.gui      在 JavaScript 中更改变量的轻量级图形用户界面      [https://github.com/dataarts/dat.gui](https://github.com/dataarts/dat.gui)*   Three.js      易于使用、轻量级、跨浏览器的通用 3D 库      [https://threejs.org/](https://threejs.org/)*   Draco 3D      缩和解压缩 3D 几何网格和点云。它旨在改进 3D 图形的存储和传输      [https://google.github.io/draco/](https://google.github.io/draco/)*   stats.js      JavaScript 性能监视器      [http://mrdoob.github.io/stats.js/](http://mrdoob.github.io/stats.js/)*   matter-js      一个用于 web 的 JavaScript 2D 物理引擎      [https://brm.io/matter-js/](https://brm.io/matter-js/)*   Oimo.js      用于 javascript 的轻量级 3d 物理引擎，是OimoPhysics      的完整 javascript 转换      [http://lo-th.github.io/Oimo.js/#basic](http://lo-th.github.io/Oimo.js/#basic)*   ammo.js      使用 Emscripten 将 Bullet 物理引擎直接移植到 JavaScript      [https://github.com/kripken/ammo.js](https://github.com/kripken/ammo.js)### [](#其他常用 "其他常用")其他常用查看详情*   Auto.js Pro      Android上支持Node.js的JavaScript自动化和编程软件      [https://pro.autojs.org/](https://pro.autojs.org/)*   Inquirer.js      实现命令行交互式界面的工具集合      [https://github.com/SBoudrias/Inquirer.js/](https://github.com/SBoudrias/Inquirer.js/)*   chalk      命令行美化工具      [https://github.com/chalk/chalk](https://github.com/chalk/chalk)*   Timer.js      简单而轻量级的库，无需任何依赖项来创建和管理计时器      [https://github.com/husa/timer.js](https://github.com/husa/timer.js)*   day.js      极简的 JavaScript 库，它使用与 Moment.js 兼容的 API 为现代浏览器解析、验证、操作和显示日期和时间      [https://day.js.org/](https://day.js.org/)*   Socket.io      支持基于事件的实时双向通信      [https://socket.io/](https://socket.io/)*   The Algorithms      GitHub 最大的开源算法库      [https://the-algorithms.com/](https://the-algorithms.com/)*   log-symbols      各种日志级别的彩色符号      [https://github.com/sindresorhus/log-symbols](https://github.com/sindresorhus/log-symbols)*   plop      微型生成器框架，使整个团队可以轻松地创建具有一定一致性的文件      [https://plopjs.com/](https://plopjs.com/)*   prompts      轻量级、美观且用户友好的交互式提示      [https://github.com/terkelg/prompts](https://github.com/terkelg/prompts)*   shelljs      基于 Node.js API 的 Unix shell 命令的可移植（Windows/Linux/macOS）实现      [https://www.npmjs.com/package/shelljs](https://www.npmjs.com/package/shelljs)*   figlet      浏览器控制台个性化输出      [https://github.com/patorjk/figlet.js](https://github.com/patorjk/figlet.js)*   picocolors      终端修改输出字符样式的 npm 包，比 chalk 体积小 14 倍，速度快 2 倍      [https://github.com/alexeyraspopov/picocolors](https://github.com/alexeyraspopov/picocolors)*   cac      用于构建 CLI 应用程序的 JavaScript 库，体积数倍小于 commander 和 yargs      [https://github.com/cacjs/cac](https://github.com/cacjs/cac)*   npm-run-all      用于并行或顺序运行多个 npm 脚本的 CLI 工具      [https://github.com/mysticatea/npm-run-all](https://github.com/mysticatea/npm-run-all)*   node-semver      语义化版本号管理的 npm 库，比如 判断一个版本是否合法，判断版本号命名是否正确，两个版本谁大谁小之类 等      [https://github.com/npm/node-semver](https://github.com/npm/node-semver)*   puppeteer      在浏览器中手动执行的大多数操作都可以使用 Puppeteer 完成      生成页面的屏幕截图和 PDF。      抓取 SPA（单页应用程序）并生成预渲染内容      自动化表单提交、UI 测试、键盘输入等。      [https://pptr.dev/](https://pptr.dev/)*   temir      用vue组件来编写命令行界面应用的工具      [https://github.com/webfansplz/temir](https://github.com/webfansplz/temir)*   enquirer      适用于 Node.js 的时尚、直观且用户友好的提示      [https://github.com/enquirer/enquirer](https://github.com/enquirer/enquirer)[](#跨平台 "跨平台")跨平台-----------------### [](#框架 "框架")框架查看详情*   uni-app      使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序等13个平台      [https://uniapp.dcloud.io/](https://uniapp.dcloud.io/)*   react-native      使用 React 构建移动应用程序      [https://reactnative.dev/](https://reactnative.dev/)*   Flutter      Google 的开源框架，用于构建美观、本机编译的多平台应用程序      [https://flutter.dev/](https://flutter.dev/)*   chameleon      一套代码运行多端，一端所见即多端所见      [http://cml.didi.cn/](http://cml.didi.cn/)*   Taro      遵循 React 语法规范的多端统一开发框架      [https://taro.zone/](https://taro.zone/)*   Electron      使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序      [https://www.electronjs.org/](https://www.electronjs.org/)*   MicroApp      京东零售推出的微前端框架。基于webcomponent-like渲染，从组件思维实现微前端，旨在降低上手难度，提高工作效率      [https://micro-zoe.github.io/micro-app/](https://micro-zoe.github.io/micro-app/)*   Tauri      使用 Web 前端构建更小、更快、更安全的桌面应用程序      [https://tauri.studio/](https://tauri.studio/)*   Hippy      跨平台的开发框架，旨在帮助开发者编写一次，运行在三个平台（iOS、Android 和 Web）上      [https://hippyjs.org/#/](https://hippyjs.org/#/)*   无界      基于 Web Components + iframe 微前端框架，具备成本低、速度快、原生隔离、功能强等一系列优点。      [https://wujie-micro.github.io/doc/](https://wujie-micro.github.io/doc/)*   qiankun      微前端的实现，基于single-spa。它旨在使构建生产就绪的微前端架构系统变得更加容易和轻松。      [https://qiankun.umijs.org/zh](https://qiankun.umijs.org/zh)### [](#Flutter "Flutter")Flutter查看详情*   pub.dev      Dart和Flutter应用程序的官方包存储库      [https://pub.dev/](https://pub.dev/)*   awesome-flutter-plugins      尽可能收集好用的Flutter插件以便更效率的开发      [https://github.com/jahnli/awesome-flutter-plugins](https://github.com/jahnli/awesome-flutter-plugins)*   flutter-widget.live      使用 Flutter for web 构建的网站，用于在线实时预览小部件示例。      [https://flutter-widget.live/basics/introduction](https://flutter-widget.live/basics/introduction)*   google Icons      Google Material Design 图标      [https://fonts.google.com/icons](https://fonts.google.com/icons)*   Json To Dart Model      Json 转 Dart Model类      [https://ashamp.github.io/jsonToDartModel/](https://ashamp.github.io/jsonToDartModel/)*   flutter awesome      很棒的列表，其中包含优秀的 Flutter 库和工具      [https://flutterawesome.com/](https://flutterawesome.com/)*   LottieFiles      免费 Lottie 动画文件、工具和插件      [https://lottiefiles.com/](https://lottiefiles.com/)### [](#Electron "Electron")Electron查看详情*   vue-cli-plugin-electron-builde      使用Electron轻松构建用于桌面的Vue.js应用      [https://nklayman.github.io/vue-cli-plugin-electron-builder/](https://nklayman.github.io/vue-cli-plugin-electron-builder/)*   electron-about-window      为Electron 提供 “关于此应用程序” 窗口。      [https://github.com/rhysd/electron-about-window](https://github.com/rhysd/electron-about-window)*   nativefier      使任何网页成为桌面应用程序      [https://github.com/nativefier/nativefier](https://github.com/nativefier/nativefier)### [](#Uniapp "Uniapp")Uniapp查看详情*   Grace UI      兼容微信小程序及uni-app的优秀前端框架，以flex布局为基础，提供了丰富的组件及界面库GraceUI      [https://www.graceui.com/](https://www.graceui.com/)*   uView      全面兼容nvue的uni-app生态框架，全面的组件和便捷的工具      [https://www.uviewui.com/](https://www.uviewui.com/)*   ThorUI      轻量、简洁、全面的移动端组件库      [https://thorui.cn/doc/](https://thorui.cn/doc/)[](#CSS "CSS")CSS-----------------### [](#动画 "动画")动画查看详情*   cssfx      精美简单的点击复制 CSS 效果      [https://cssfx.netlify.app/](https://cssfx.netlify.app/)*   Twitter Hashflags      Twitter 点赞动画      [https://hashflags.io/](https://hashflags.io/)*   UI Snippets      UI 片段的集合      [https://ui-snippets.dev/](https://ui-snippets.dev/)*   SpinKit      CSS 动画的加载指示器      [https://tobiasahlin.com/spinkit/](https://tobiasahlin.com/spinkit/)*   animate.css      强大的预设css3动画库      [https://animate.style/](https://animate.style/)*   犸良      一站式动效制作平台，通过海量的动效素材以及可视化编辑能力，帮助零基础的用户轻松完成动效制作      [https://design.alipay.com/emotion](https://design.alipay.com/emotion)*   animista      Css 动画      [https://animista.net/](https://animista.net/)*   lordicon      功能强大的精心制作的动画图标库      [https://lordicon.com/](https://lordicon.com/)*   svg-spinners      24 x 24 dp的svg格式loading加载器      [https://github.com/n3r4zzurr0/svg-spinners](https://github.com/n3r4zzurr0/svg-spinners)*   magic      具有炫酷效果的 CSS3 动画      [https://www.minimamente.com/project/magic/](https://www.minimamente.com/project/magic/)*   Hover.css      CSS3 驱动的悬停效果，可应用于链接、按钮、徽标、SVG、特色图像等      [http://ianlunn.github.io/Hover/](http://ianlunn.github.io/Hover/)*   eva-icons      超过 480 个制作精美的开源图标。SVG、Sketch、Web 字体和动画支持      [https://akveo.github.io/eva-icons/#/](https://akveo.github.io/eva-icons/#/)### [](#工具-1 "工具")工具查看详情*   normalize.css      CSS 重置的现代替代方案      [http://necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)*   Squoosh      对比 tinypng 有【更好的】压缩效果      [https://squoosh.app/](https://squoosh.app/)### [](#UI "UI")UI查看详情*   Manypixels      收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色      [https://www.manypixels.co/gallery](https://www.manypixels.co/gallery)*   U钙网      免费的LOGO在线设计制作工具      [https://www.uugai.com/](https://www.uugai.com/)*   design-blocks      一组 170 多个基于 Bootstrap 的设计块，可用于创建干净的现代网站      [https://froala.com/design-blocks/](https://froala.com/design-blocks/)*   unDraw      精美的 SVG 插画集      [https://undraw.co/illustrations](https://undraw.co/illustrations)*   Ira Design      通过调配渐变色、搭配手绘组件定制插画      [https://iradesign.io/gallery/illustrations](https://iradesign.io/gallery/illustrations)*   lukasz adam      免费 SVG 插画      [https://lukaszadam.com/illustrations](https://lukaszadam.com/illustrations)*   pixeltrue      创建令人叹为观止的项目的插图      [https://www.pixeltrue.com/packs](https://www.pixeltrue.com/packs)*   3dicons      3d图标库      [https://3dicons.co/](https://3dicons.co/)*   css-buttons      100 个现代 CSS 按钮      [https://css-buttons.web.app/](https://css-buttons.web.app/)*   uiset      优质免费的UI设计资源      [https://uiset.com/](https://uiset.com/)*   error404      404插画页面      [https://error404.fun/](https://error404.fun/)*   ui8      5,745 个精选设计资源，为您的创意工作流程注入活力      [https://ui8.net/](https://ui8.net/)[](#编程工具 "编程工具")编程工具--------------------### [](#代码工具 "代码工具")代码工具查看详情*   gitignore.io      为项目创建有用的 .gitignore 文件      [https://www.toptal.com/developers/gitignore](https://www.toptal.com/developers/gitignore)*   any-rule      常用正则大全, 支持web / vscode / idea / Alfred Workflow多平台      [https://any86.github.io/any-rule/](https://any86.github.io/any-rule/)*   30-seconds-of-code      满足多种语言开发需求的简短代码片段      [https://www.30secondsofcode.org/](https://www.30secondsofcode.org/)*   github-readme-stats      为 github 自述文件动态生成的统计信息      [https://github.com/anuraghazra/github-readme-stats](https://github.com/anuraghazra/github-readme-stats)*   cz-cli      规范提交说明的git工具      [http://commitizen.github.io/cz-cli/](http://commitizen.github.io/cz-cli/)*   commitlint      git commit 校验工具      [https://commitlint.js.org/#/](https://commitlint.js.org/#/)*   husky      Git hooks 工具，可以防止使用 Git hooks 的一些不好的 commit 或者 push      [https://typicode.github.io/husky/#/](https://typicode.github.io/husky/#/)*   lint-staged      代码提交之前,进行代码规则检查并尝试修复，能够确保进入git库的代码都是符合代码规则      [https://github.com/okonet/lint-staged](https://github.com/okonet/lint-staged)*   anywhere      随启随用的静态文件服务器      [https://github.com/JacksonTian/anywhere](https://github.com/JacksonTian/anywhere)*   code996      统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度      [https://hellodigua.github.io/code996/#/](https://hellodigua.github.io/code996/#/)### [](#图像工具 "图像工具")图像工具查看详情*   bigjpg      使用度卷积神经网络。它会将噪点和锯齿的部分进行补充，实现图片的无损放大      [https://bigjpg.com/](https://bigjpg.com/)*   jpghd      使用人工智能 AI 超分模型和深度学习技术来将低清破损有噪点图片处理成高画质高分辨率图片同时支持破损老照片修复和老照片上色      [https://jpghd.com/](https://jpghd.com/)*   bigmp4      使用智能 AI 模型，能将视频无损高清放大、增强画质、智能补帧使画面丝滑流畅栩栩如生同时支持黑白视频上色和慢动作      [https://bigmp4.com/](https://bigmp4.com/)*   imglarger      基于强大的机器学习可在不降低质量的情况下提高图像分辨率      [https://imglarger.com/](https://imglarger.com/)*   unscreen      智能AI去除视频背景在线神器      [https://www.unscreen.com/](https://www.unscreen.com/)*   阿里妈妈创意中心      阿里智能文案，智能抠图工具      [https://chuangyi.taobao.com/](https://chuangyi.taobao.com/)### [](#文件转换 "文件转换")文件转换查看详情*   ALL TO ALL      全类型的在线文件转换平台，免费、快速，无须下载安装任何软件      [https://www.alltoall.net/](https://www.alltoall.net/)*   Convertio      将文件转换成任意格式      [https://convertio.co/zh/](https://convertio.co/zh/)[](#Vue3生态工具 "Vue3生态工具")Vue3生态工具--------------------------------### [](#Web-UI库 "Web UI库")Web UI库查看详情*   ElementUI Plus      一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库      [https://element-plus.org/zh-CN/](https://element-plus.org/zh-CN/)*   Ant Design of Vue      Ant Design 的 Vue 实现，开发和服务于企业级后台产品      [https://www.antdv.com/docs/vue/introduce-cn](https://www.antdv.com/docs/vue/introduce-cn)*   BalmUI      基于谷歌的 Material Design，附带 Vue 插件和指令，以及从简单到复杂的高度可定制组件      [https://next-material.balmjs.com/](https://next-material.balmjs.com/)*   Naive UI      图森Vue3的组件库，文档完整，我项目中经常使用      [https://www.naiveui.com/zh-CN/os-theme](https://www.naiveui.com/zh-CN/os-theme)*   arco.design      字节跳动企业级产品设计系统，支持React和Vue双版本      [https://arco.design/](https://arco.design/)*   Quasar      轻松构建高性能和高质量的Vue.js 3用户界面，好用，但没有中文文档      [https://quasar.dev/](https://quasar.dev/)*   iDUX      Vue3.x 的 UI 组件库，完全使用 TypeScript 开发      [https://idux.site/](https://idux.site/)*   TDesign      腾讯业务团队在服务业务过程中沉淀的一套企业级设计体系      [https://tdesign.tencent.com/](https://tdesign.tencent.com/)      [https://tdesign.tencent.com/vue-next/overview](https://tdesign.tencent.com/vue-next/overview)*   PrimeVue      易于使用、多功能、高性能的 Vue UI 组件库      [https://www.primefaces.org/primevue/](https://www.primefaces.org/primevue/)*   DevUI      华为基于 Vue3 和 DevUI 设计的 UI 组件      [https://vue-devui.github.io/](https://vue-devui.github.io/)*   vuestic-ui      Vue 3 的免费和开源 UI 库 ,UI非常好看，并且有可用后台管理界面。      [https://vuestic.dev/](https://vuestic.dev/)*   Headless UI      完全无样式、完全可访问的 UI 组件，旨在与 Tailwind CSS 完美集成。      [https://headlessui.com/](https://headlessui.com/)*   View UI Plus      基于 Vue.js 3 的企业级 UI 组件库和前端解决方案      [https://www.iviewui.com/](https://www.iviewui.com/)### [](#移动UI库 "移动UI库")移动UI库查看详情*   Vant      有赞轻量、可靠的移动端组件库      [https://vant-contrib.gitee.io/vant/#/zh-CN](https://vant-contrib.gitee.io/vant/#/zh-CN)*   NutUI      京东风格的轻量级移动端 Vue 组件库，非常适合移动端电商使用。      [https://nutui.jd.com/#/](https://nutui.jd.com/#/)*   Varlet      Material 风格移动端组件库 ，文档非常齐全。      [https://varlet.gitee.io/varlet-ui/#/zh-CN/home](https://varlet.gitee.io/varlet-ui/#/zh-CN/home)*   nutui-bingo      京东基于 NutUI 的抽奖组件库，助力营销活动和小游戏场景。      [https://nutui.jd.com/bingo/#/](https://nutui.jd.com/bingo/#/)### [](#相关工具 "相关工具")相关工具查看详情*   unplugin-vue-components      antfu 按需组件自动导入，开箱即用地支持 Vue 2 和 Vue 3，Tree-shakable，只注册你使用的组件，附有流行UI 库的内置解析器。      [https://www.npmjs.com/package/unplugin-vue-components](https://www.npmjs.com/package/unplugin-vue-components)*   vuex-persistedstate      在页面重新加载之间保持并重载您的 Vuex 状态      [https://github.com/robinvdvleuten/vuex-persistedstate](https://github.com/robinvdvleuten/vuex-persistedstate)*   vuex-persist      支持 Typescript 的Vuex插件，它能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStorage      [https://championswimmer.in/vuex-persist/](https://championswimmer.in/vuex-persist/)*   @vueuse/gesture      手势库，使应用程序具有交互性      [https://gesture.vueuse.org/](https://gesture.vueuse.org/)*   unplugin-auto-import      antfu 自动导入 Vite、Webpack、Rollup 和 esbuild 的 API。支持 TypeScript。      [https://github.com/antfu/unplugin-auto-import](https://github.com/antfu/unplugin-auto-import)*   pinia-plugin-persistedstate      Pinia 商店的可配置持久性      [https://github.com/prazdevs/pinia-plugin-persistedstate](https://github.com/prazdevs/pinia-plugin-persistedstate)*   [https://vue-termui.dev/](https://vue-termui.dev/)      一个基于 Vue.js 的终端 UI 框架，可让您轻松构建现代终端应用程序      [https://vue-termui.dev/](https://vue-termui.dev/)### [](#可视化-1 "可视化")可视化查看详情*   Pdfvuer      DF 查看器，使用 Mozilla 的 PDF.js，支持 Vue2 和 Vue3      [https://arkokoley.github.io/pdfvuer/](https://arkokoley.github.io/pdfvuer/)*   vue3-marquee      无缝滚动组件      [https://vue3-marquee.vercel.app/](https://vue3-marquee.vercel.app/)*   Vue-ECharts      百度ECharts 的 Vue.js 组件。 配置参考Echarts官方 基于 ECharts v5+ 开发，适用于Vue.js 2/3。      [https://vue-echarts.dev/](https://vue-echarts.dev/)*   iconpark      字节跳动出品，将一个SVG图标转化为多个主题，并生成React图标，Vue图标，svg图标      [https://iconpark.oceanengine.com/home](https://iconpark.oceanengine.com/home)### [](#插件 "插件")插件查看详情*   vue-multiselect-next      Vue.js 的通用选择/多选/标记组件      [https://vue-multiselect.js.org/](https://vue-multiselect.js.org/)*   vue-print-nb      用于印刷、简单、快速、方便、轻便的指令包装器      [https://github.com/Power-kxLee/vue-print-nb](https://github.com/Power-kxLee/vue-print-nb)*   vue-i18n-next      Vue3的国际化插件      [https://vue-i18n.intlify.dev/](https://vue-i18n.intlify.dev/)*   vue-cropper      简单的vue图片裁剪插件      [http://github.xyxiao.cn/vue-cropper/example/](http://github.xyxiao.cn/vue-cropper/example/)*   Grid Layout      Vue.js 的网格布局系统      [https://jbaysolutions.github.io/](https://jbaysolutions.github.io/)*   Vue Qrcode Reader      允许在不离开浏览器的情况下检测和解码二维码      [https://gruhn.github.io/vue-qrcode-reader/](https://gruhn.github.io/vue-qrcode-reader/)*   Makeit Captcha      基于 Vue3 + Vite + Canvas 开发的滑块验证码，动态生成验证滑块，结合后端的二次校验，能有效的避免被抓取模拟验证[https://admin.makeit.vip/components/captcha](https://admin.makeit.vip/components/captcha)*   vue3-clipboard      Vue 3 的 clipboard.js      [https://github.com/soerenmartius/vue3-clipboard](https://github.com/soerenmartius/vue3-clipboard)*   vue.draggable      基于Sortable.js的Vue 3拖放组件      [https://sortablejs.github.io/vue.draggable.next/#/simple](https://sortablejs.github.io/vue.draggable.next/#/simple)*   BetterScroll      解决移动端（已支持 PC）各种滚动场景需求的插件。      [https://better-scroll.github.io/docs/zh-CN/](https://better-scroll.github.io/docs/zh-CN/)### [](#相关生态 "相关生态")相关生态查看详情*   Vue 插件库      [https://www.vue365.cn/](https://www.vue365.cn/)*   Pinia      轻量级状态管理库，API 设计更接近Vuex 5的提案      [https://pinia.vuejs.org/](https://pinia.vuejs.org/)*   Nuxt Modules      Nuxt 发现我们的模块列表以增强您的Nuxt 项目      [https://modules.nuxtjs.org/](https://modules.nuxtjs.org/)*   Nuxt 3      轻量级应用框架,可用来创建服务端渲染 (SSR) 应用      [https://v3.nuxtjs.org/](https://v3.nuxtjs.org/)*   vuepress      Vue 驱动的静态网站生成器      [https://v2.vuepress.vuejs.org/zh/](https://v2.vuepress.vuejs.org/zh/)*   VueUse      强大的 Vue 组合实用程序集合      [https://vueuse.org/](https://vueuse.org/)### [](#动画-1 "动画")动画查看详情*   vue-starport      带有动画的跨路由共享组件      [https://vue-starport.netlify.app/](https://vue-starport.netlify.app/)*   @vueuse/motion      Vue Composables 让你的组件动起来      [https://motion.vueuse.org/](https://motion.vueuse.org/)### [](#音视频-1 "音视频")音视频查看详情*   @vueuse/sound      用于播放音效的 Vue 组合      [https://sound.vueuse.org/](https://sound.vueuse.org/)[](#全栈-后端 "全栈-后端")全栈-后端-----------------------### [](#插件-1 "插件")插件查看详情*   isomorphic-git      用于节点和浏览器的 git 纯 JavaScript 实现      [https://isomorphic-git.org/](https://isomorphic-git.org/)*   jsonwebtoken      node.js 的 JsonWebToken 实现      [https://github.com/auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)*   Qiniu SDK      七牛资源（云）存储 SDK for Node.js      [https://developer.qiniu.com/kodo/sdk/nodejs](https://developer.qiniu.com/kodo/sdk/nodejs)*   koa-body      功能齐全的koa正文解析器中间件，支持multipart、urlencoded和json请求正文，提供与 Express 的 bodyParser 相同的功能      [https://github.com/koajs/koa-body](https://github.com/koajs/koa-body)*   koa-json-error      纯Koa JSON 应用程序的错误处理程序，显示堆栈跟踪      [https://github.com/koajs/json-error](https://github.com/koajs/json-error)*   koa-jwt      用于验证 JSON Web 令牌的 Koa 中间件      [https://github.com/koajs/jwt](https://github.com/koajs/jwt)*   koa-router      Koa 的路由器中间件      [https://github.com/koajs/router](https://github.com/koajs/router)*   koa2-cors      koa2 的 CORS 中间件      [https://github.com/zadzbw/koa2-cors](https://github.com/zadzbw/koa2-cors)*   koa-sslify      为 Koa.js 实施 HTTPS 中间件      [https://github.com/turboMaCk/koa-sslify](https://github.com/turboMaCk/koa-sslify)*   superagent-proxy      允许您通过某种代理来代理 HTTP 请求      [https://github.com/TooTallNate/superagent-proxy](https://github.com/TooTallNate/superagent-proxy)*   node-http-proxy-agen      HTTP 端点的 HTTP(s) 代理“http.Agent”实现      [https://github.com/TooTallNate/node-http-proxy-agent](https://github.com/TooTallNate/node-http-proxy-agent)*   https-proxy-agent      HTTPS 端点的 HTTP(s) 代理“http.Agent”实现      [https://github.com/TooTallNate/node-https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent)*   socks-proxy-agent      用于 HTTP 和 HTTPS 的 SOCKS (v4/v5) 代理“http.Agent”实现      [https://github.com/TooTallNate/node-socks-proxy-agent](https://github.com/TooTallNate/node-socks-proxy-agent)*   simple-get      发出 http get 请求的最简单方法。支持 HTTPS、重定向、gzip/deflate、小于 100 行的流      [https://github.com/feross/simple-get](https://github.com/feross/simple-get)*   commander.js      node.js命令行界面的完整解决方案      [https://github.com/tj/commander.js](https://github.com/tj/commander.js)*   ora      命令行 loading 动效      [https://github.com/sindresorhus/ora](https://github.com/sindresorhus/ora)*   dotenv      从 .env 为 nodejs 项目加载环境变量      [https://github.com/motdotla/dotenv](https://github.com/motdotla/dotenv)*   FFCreator      基于node.js的高速视频制作库      [https://tnfe.github.io/FFCreator/#/](https://tnfe.github.io/FFCreator/#/)*   sharp      高性能 Node.js 图像处理，调整 JPEG、PNG、WebP、AVIF 和 TIFF 图像大小的最快模块      [https://sharp.pixelplumbing.com/](https://sharp.pixelplumbing.com/)*   node-fs-extra      强大的文件操作库， 是 Nodejs fs 模块 的增强版      [https://github.com/jprichardson/node-fs-extra](https://github.com/jprichardson/node-fs-extra)*   chokidar      用于文件监控的库，解决兼容性不好、无法监听、监听多次 等大量影响性能的问题      [https://paulmillr.com/](https://paulmillr.com/)*   fast-glob      快速批量导入、读取文件的库      [https://github.com/mrmlnc/fast-glob](https://github.com/mrmlnc/fast-glob)*   peerflix      node.js 的流式 torrent 客户端      [https://github.com/mafintosh/peerflix](https://github.com/mafintosh/peerflix)### [](#工具-2 "工具")工具查看详情*   Nginx      高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务      [https://blog.redis.com.cn/doc/](https://blog.redis.com.cn/doc/)*   PM2      Node进程管理工具，如性能监控、自动重启、负载均衡等      [https://pm2.keymetrics.io/docs/usage/process-management/](https://pm2.keymetrics.io/docs/usage/process-management/)*   nodemon      监视 node.js 应用程序中的任何更改并自动重新启动服务器      [https://nodemon.io/](https://nodemon.io/)*   RobotJS      Node.js 桌面自动化，控制鼠标、键盘和阅读屏幕等      [http://robotjs.io/](http://robotjs.io/)*   Jenkins      领先的开源自动化服务器，Jenkins 提供了数百个插件来支持构建、部署和自动化任何项目      [https://www.jenkins.io/](https://www.jenkins.io/)*   nexe      将 node.js 应用程序中创建一个可执行文件      [https://github.com/nexe/nexe](https://github.com/nexe/nexe)*   debug      模仿 Node.js 核心调试技术的小型 JavaScript 调试实用程序。适用于 Node.js 和 Web 浏览器      [https://github.com/debug-js/debug](https://github.com/debug-js/debug)### [](#数据库 "数据库")数据库查看详情*   mongoose      旨在在异步环境中工作的 MongoDB 对象建模      [https://mongoosejs.com/](https://mongoosejs.com/)*   GraphQL      用于 API 的查询语言也是一个满足你数据查询的运行时      [https://graphql.cn/](https://graphql.cn/)*   lowdb数据库      适用于Node，Electron和浏览器的小型JSON数据库。由Lodash驱动      [https://github.com/typicode/lowdb](https://github.com/typicode/lowdb)*   nedb      适用于Node.js，nw.js，Electron和浏览器的嵌入式持久性数据库或内存数据库,API是MongoDB的子集      [https://github.com/louischatriot/nedb](https://github.com/louischatriot/nedb)### [](#API "API")API查看详情*   网易云音乐 API      全部接口已升级到最新，具备登录接口,多达200多个接口      [https://binaryify.github.io/NeteaseCloudMusicApi/#/](https://binaryify.github.io/NeteaseCloudMusicApi/#/)*   Node-SpliderApi      基于 Node+Express 网络爬虫 API 接口 包括前端开发日报、kugou 音乐、前端 top 框架排行、妹纸福利、搞笑视频、段子笑话、各类视频新闻资讯 热点详情接口数据,接口数据更新目标      [https://ecitlm.github.io/Node-SpliderApi/](https://ecitlm.github.io/Node-SpliderApi/)*   聚合数据      免费向开发者提供全国车辆违章查询API,天气API,基站数据,移动联通基站,电信基站,覆盖国内外1000多个主要城市公共交通信息数据      [https://www.juhe.cn/](https://www.juhe.cn/)*   极速数据      提供各类生活数据API,方便开发者快速简单的开发APP、软件及其他服务平台      [https://www.jisuapi.com/](https://www.jisuapi.com/)*   京东万象      供金融、电商、运营商数据,免费数据,热门数据,学籍数据,企业诉讼数据,实名认证,征信数据,质检等多种数据      [https://wx.jdcloud.com/api](https://wx.jdcloud.com/api)*   QQ音乐API      通过Web网页版请求QQ音乐接口数据      [https://rain120.github.io/qq-music-api/#/](https://rain120.github.io/qq-music-api/#/)*   万维易源      一站式全网API调用平台      [https://www.showapi.com/](https://www.showapi.com/)*   TP5 Splider Api      基于Thinkphp5+phpQuery 网络爬虫抓取数据接口 统一输出接口数据api      [https://ecitlm.github.io/TP5_Splider/#/](https://ecitlm.github.io/TP5_Splider/#/)*   Roll API      提供开发中常用数据的一个稳定聚合Api接口      [https://www.mxnzp.com/doc/list](https://www.mxnzp.com/doc/list)*   Open API      收集可用的Open APIs      [https://www.wanandroid.com/openapis](https://www.wanandroid.com/openapis)*   天行数据      160多个免费接口，接口高度统一，简单易用，毫秒级响应      [https://www.tianapi.com/](https://www.tianapi.com/)*   free-api      免费API,收集免费的接口服务      [https://www.free-api.com/](https://www.free-api.com/)*   douban-imdb-api      基于豆瓣、IMDB、烂番茄评分的电影电视剧双语(中英)数据api接口      [https://www.iqi360.com/p/douban-imdb-api](https://www.iqi360.com/p/douban-imdb-api)### [](#框架-1 "框架")框架查看详情*   Koa      基于 Node.js 平台的下一代 web 开发框架      [https://koajs.com/](https://koajs.com/)*   Express      用于Node.js 的快速、独立、简约的 Web 框架      [https://expressjs.com/](https://expressjs.com/)*   egg.js      为企业级框架和应用而生      [https://www.eggjs.org/](https://www.eggjs.org/)*   Nest.js      构建高效且可扩展的服务器端应用程序的渐进式Node.js框架      [https://nestjs.com/](https://nestjs.com/) -->]]></content>
      
      
      <categories>
          
          <category> 转载内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端的焦虑，你想过30岁以后的前端路怎么走吗？</title>
      <link href="/2022/12/09/%E5%89%8D%E7%AB%AF%E7%9A%84%E7%84%A6%E8%99%91/"/>
      <url>/2022/12/09/%E5%89%8D%E7%AB%AF%E7%9A%84%E7%84%A6%E8%99%91/</url>
      
        <content type="html"><![CDATA[ <p style="margin-top:30px;"></p><p>转载一位技术前辈在 30 岁时所写的文章，原链接：</p><div class="tag link"><a class="link-card" title="前端的焦虑，你想过30岁以后的前端路怎么走吗？" href="https://juejin.cn/post/6844903615681806344"><div class="left"><img src="https://p3-passport.byteimg.com/img/user-avatar/47cf3a9648246d8df4e804ab31f66720~100x100.awebp"></div><div class="right"><p class="text">前端的焦虑，你想过30岁以后的前端路怎么走吗？</p><p class="url">https://juejin.cn/post/6844903615681806344</p></div></a></div><p>作者是我非常敬佩的一位技术前辈，这篇文章是他在 30 岁时候写下的，那时候是 2018 年。把原文转载于此，帮助更多的同志能提前 5 年，提前 10 年，看到自己的职业可能性，更提前的预判到自己可能遇到的问题，并为此提前做准备，笨鸟早飞，用时间差打出自己的职业竞争力。</p><h2 id="前端的焦虑，你想过30岁以后的前端路怎么走吗？"><a href="#前端的焦虑，你想过30岁以后的前端路怎么走吗？" class="headerlink" title="前端的焦虑，你想过30岁以后的前端路怎么走吗？"></a>前端的焦虑，你想过30岁以后的前端路怎么走吗？</h2><h3 id="原因何在"><a href="#原因何在" class="headerlink" title="原因何在"></a>原因何在</h3><p>1.从客观原因来看，前端相对于后端的入门门槛确实低了不少。公司对前端的需求量虽然很旺盛，但是对前端的技术能力要求却不是很高，特别是一些小公司或者不是技术驱动的公司。这给人一种错觉，好像只需要懂一些js，会一般的html+css就能完成前端的工作。也由于这种原因，前端总是处于技术鄙视链的最底层。<br> 2.从主观原因来说，前端平时基本都是和页面和看得到的UI打交道居多，对于后端的服务，数据存储，运维，部署等等懂得的不多，也导致了领导我们的往往都是后端。在大多数的情况下，你基本很难看到前端去统筹大局，统领前后端。<br> 3.从个人原因来总结，前端经验上去了，工作年限上去了，但是职级却没有上去。归根结底，主要是因为自己的后端知识薄弱，前端深度不够。还有前端管理的职位僧多粥少导致的。</p><p>居于上述的原因，前端的天花板来得比别的技术栈更早。这也是导致我们焦虑的主要原因。既然有原因，那就可以找相应的解决方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.对症下药，哪里缺乏补哪里。前端的进阶，总离不开对后端的认知。我们不能把自己限死在前端这个范畴里面。业务驱动技术，而不是技术引导业务。不懂数据库，补数据库。不懂服务端，补服务端。幸好现在有nodeJs这个利器。 我们完全可以借用nodejs，去切入后端的世界，了解和学习后端的知识。做到不受语言的限制，学习应用，也就能突破自己的瓶颈。  除了node，php也是一个不错的选择。<br> 2.主动创造条件。很多时候，选择比努力更重要。如果你发现你在一个地方再怎么努力也改变不了现状，这个时候你就应该出去别的地方看看，或者想想怎样改变现状。如果你无法升管理，那你可以尝试去别的地方当管理；如果你总是厌倦天天的无止境的切图和coding，但是又有很多想法，转岗去尝试当产品也是一个选择。<br> 3.大前端和全栈是以后前端的一个趋势，懂后端的前端，懂各端的前端更加具有竞争力，以后可以往这个方向靠拢。</p><p>现在脑补一下前端知识体系的脑图。</p><!-- ![](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090436582.webp) --><p><img src="https://picgo.chongqing0111.top/images/202212090436582.webp" alt></p><p>脑图url<a href="https://link.juejin.cn?target=https%3A%2F%2Fsfault-image.b0.upaiyun.com%2F234%2F326%2F2343266726-5a01a319826bf">：https://sfault-image.b0.upaiyun.com/234/326/2343266726-5a01a319826bf</a><br> 注：脑图来自 <a href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011899698">segmentfault.com/a/119000001…</a></p><p>接下来再总结一下前端以后的路怎么走。  （下面的路是我以前总结的，在csdn可以搜到）</p><h3 id="选择一：前端——高级前端——全栈——前端架构师-前端专家"><a href="#选择一：前端——高级前端——全栈——前端架构师-前端专家" class="headerlink" title="选择一：前端——高级前端——全栈——前端架构师(前端专家)"></a>选择一：前端——高级前端——全栈——前端架构师(前端专家)</h3><p>选择这条路的童鞋，最好就是技术迷，热爱前端，对技术有说不出的热情。喜欢专研，不管现在，还是将来，都乐于接受新事物新知识。</p><p>这条路的优点：一直都能呆在自己喜欢的领域，踏踏实实的敲代码，薪水也能不断提高。</p><p>这条路的缺点：30多岁还要各种敲代码，难免要被其他人管着，疲于各种公司的需求。</p><h3 id="选择二：前端——高级前端——前端主管——前端经理"><a href="#选择二：前端——高级前端——前端主管——前端经理" class="headerlink" title="选择二：前端——高级前端——前端主管——前端经理"></a>选择二：前端——高级前端——前端主管——前端经理</h3><p>这条路，可能是大部分前端，都渴望走的路，都会理所当然的以为自己以后会走上的路。这个时候问题来了？哪里来这么多的前端主管和前端经理给你啊？</p><p>这条路的优点：一步一脚印，人生不断往上爬。成为高富帅，赢取白富美，登上事业的高峰。</p><p>这条路的缺点：就拿广州来说，不要说前端经理，就是前端主管这个职位，估计也没有多少公司是存在的。很多人上到前端经理也算到顶了。这里是想说明一点，路是有的，但是选择很少。万一有一天你要跳槽了，你真的不一定能找到下一间公司，又能当会前端主管的。  我所在的公司，当得上主管或者组长这个职位的人，真的两只手就可以数完。</p><p>ps：本人其实也想走这条路，但是我很唠叨的再强调一遍，30几岁之后，你未必能找到喜欢的公司的这个职位。僧多粥少啊。最后的结果会沦为，继续当码农。</p><h3 id="选择三：前端——高级前端——转后台——高级后台——后台经理"><a href="#选择三：前端——高级前端——转后台——高级后台——后台经理" class="headerlink" title="选择三：前端——高级前端——转后台——高级后台——后台经理"></a>选择三：前端——高级前端——转后台——高级后台——后台经理</h3><p>这也是不少有实力的前端走的一条路。毕竟，在大多的公司，在大多的时候，都是后台统领着前台。说一句不好听的话，前端是一个习惯被领导的职位。 后台引导统筹项目的开发，估计大家都看得多了。前端统领后台，统筹项目开发你听过没有（除了张云龙）？ 很少。至少我是没接触过的。</p><p>这条路的优点：华丽转岗，前后通杀，也能走出一辈子码农的死循环，当上经理，做管理层。</p><p>这条路的缺点：前端转后台，这明显不是一条好走的路，需要熬很多苦，学很多后台的东西，再慢慢成长起来。简单概括就是成本高，前期很辛苦。熬过了，上路了，就有机会走上更高的台阶；熬不过了，浪费了青春，继续当个二流的后台开发，继续码农。</p><h3 id="选择四：前端——高级前端——转产品——产品经理——高级产品经理"><a href="#选择四：前端——高级前端——转产品——产品经理——高级产品经理" class="headerlink" title="选择四：前端——高级前端——转产品——产品经理——高级产品经理"></a>选择四：前端——高级前端——转产品——产品经理——高级产品经理</h3><p>这条路本人觉得也是一条不错的出路。在这个最好又最坏的年代，人人都是产品经理。在前端界打滚了这么多年，自然有不少产品的基础和思想。所以前端转产品，也是一条相对不会很吃力的路。</p><p>这条路的优点：有一定的基础，产品经理需求量大，以后的选择很多。</p><p>这条路的缺点：半路出家，前期也会很吃力地转型，转产品需要自身很有想法。懒于思考的人儿不适合。</p><h3 id="选择五：前端——高级前端——其他行业，创业等等"><a href="#选择五：前端——高级前端——其他行业，创业等等" class="headerlink" title="选择五：前端——高级前端——其他行业，创业等等"></a>选择五：前端——高级前端——其他行业，创业等等</h3><p>这条路就是现在的我，总是憧憬着以后有一份不错的生意，然后有白富美，有车有楼，财务自由的一条路。</p><p>这条路的优点：未知性很大，不用再整天敲代码，可能还真的很赚钱。</p><p>这条路的缺点：正因为未知性太大，所以前途未卜。选择走这条路的童鞋，要早早地想好要干什么，干的事情需要具备什么技能，趁早学。</p><p>总结：学无止境，祝大家都能突破自己的瓶颈。可能还有其他的路，欢迎补充。 ps：以上所说带有强烈的个人主观意愿，可能有失客观事实，望体谅。</p>]]></content>
      
      
      <categories>
          
          <category> 转载内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接受自己的平凡</title>
      <link href="/2022/12/09/%E6%8E%A5%E5%8F%97%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B9%B3%E5%87%A1/"/>
      <url>/2022/12/09/%E6%8E%A5%E5%8F%97%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B9%B3%E5%87%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="周五掏三观"><a href="#周五掏三观" class="headerlink" title="周五掏三观"></a>周五掏三观</h2><p>其实，对于前端这份工作，我一直以来的心态就是平凡，我干的这份职业，并不值得对亲朋好友吹嘘，我干的这份工作，也仅仅是一份工作，他并不比扫大街送外卖这份职业高等好多，因为总归到头，我们都是一个大城市里的打工人。</p><p>我甚至觉得这份工作，只要正常念完中学的孩子，进培训班培训半年，也一样能做，所以我们没有资格对这份工作报以骄傲。</p><p>身边总有同事好友说：谁谁进了字节，谁谁进了腾讯，好像就能高人一等了，殊不知公司体量越大，裁员也会越多，谁都有生涯到头的时候吧。</p><p>最后，我想以一个平凡人的角度，希望正在挣扎的你能接受自己平凡</p><p>因为，很多的这样的你我，都是一样的平凡人</p><p>我们注定成不了金字塔里的顶尖</p><p>我们注定成不了行业中的翘楚</p><p>我们注定成不了传说中的扫地僧</p><p>我们注定成不了技术中的大拿</p><p>不管你究竟付出了多大的努力，也是如此。</p><p>所以，我希望这样的你，能宽恕自己的平凡，花更多的时间在陪伴家人，拓展社交，培养兴趣爱好，甚至是可以去养花花草草，有机会的话，多发展发展副业，人脉，如果能学会投资理财，这是最好的。</p><p>弱冠之年，我有这样的领悟，只是希望技术不要成为你的唯一，毕竟生活和健康，才是你真正需要拥有的东西</p><p>弱冠之年，我接受这样平凡的自己</p><p>就像许巍的歌“曾梦想仗剑走天涯，看一看世界的繁华”</p><p>这让我想起几年前的自己，刚来到南京的第一天，迎着夕阳，走在双龙大道的马路边</p><p>地上的影子被斜阳拉的老长老长，金灿灿的光照耀在人的脸上 而不觉得耀眼</p><p>彼此挥斥方遒，有说有笑，诉说着彼此都有着的那远大的目标和理想</p><p>我也曾拥有每个前端人的那个最初的梦想“努力钻研技术，出任公司ceo，赢取白富美，走上人生巅峰”</p><p>但是繁华过后，确是生活的平凡和美好</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动Web笔记</title>
      <link href="/2022/12/09/%E7%A7%BB%E5%8A%A8Web%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/09/%E7%A7%BB%E5%8A%A8Web%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="移动Web"><a href="#移动Web" class="headerlink" title="移动Web"></a>移动Web</h1><h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><h4 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h4><p>rem:是一个相对单位，类似于em,不同的是rem的基准是相对于html元素的字体大小。</p><p>rem优点：可以通过修改html里面的文字大小来改变页面中元素的大小，可以整体控制</p><p>em：是一个相对单位，父元素的字体大小</p><h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">10em</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1em=12px<br>10em=120px</p></blockquote><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>语法:</p><p>顺序：</p><p>screen和and必须带上不能省略</p><p>px单位不能省略的</p><h4 id="媒体查询-rem实现元素动态化大小变化"><a href="#媒体查询-rem实现元素动态化大小变化" class="headerlink" title="媒体查询+rem实现元素动态化大小变化"></a>媒体查询+rem实现元素动态化大小变化</h4><p>引入资源：</p><p> 媒体查询最好的方法：从小到大</p><p>针对不同的屏幕尺寸，调用用不同的css样式文件</p><p>当样式比较繁多的时候 ,我们可以针对不同的媒体使用不同 stylesheets (样式表 )。<br>原理, 就是直接在link中判断设备的尺寸,然后引用不同的css文件。</p><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><h4 id="css弊端"><a href="#css弊端" class="headerlink" title="css弊端"></a>css弊端</h4><p>CSS是一门非程序式语言,没有变量、函数、SCOPE (作用域)等概念。<br>●CSS需要书写大量看似没有逻辑的代码, CSS冗余度是比较高的。<br>●不方便维护及扩展,不利于复用。<br>●CSS没有很好的计算能力<br>●非前端开发工程师来讲,往往会因为缺少CSS编写经验而很难写出组织良好且易于维护的CSS代码项目。</p><h4 id="Less介绍"><a href="#Less介绍" class="headerlink" title="Less介绍"></a>Less介绍</h4><p>Less ( Leaner Style Sheets的缩写)是门CSS扩展语言,也成为CSS预处理器。<br>做为CSS的一种形式的扩展,它并没有减少CSS的功能,而是在现有的CSS语法上,为CSS加入程序式语言的特性。<br>它在CSS的语法基础之上,引入了变量, Mixin(混入) , 运算I以及函数等功能,大大简化了CSS的编写，并且降低了CSS的维护成本,就像它的名称所说的那样, Less可以让我们用更少的代码做更多的事情。</p><p>常见的CSS预处理器: Sass、Less、 Stylus</p><p>一句话: Less是一门CSS预处理语言,它扩展了CSS的动态特性。</p><h4 id="Less使用"><a href="#Less使用" class="headerlink" title="Less使用"></a>Less使用</h4><p>我们首先新建一 个后缀名为less的文件，在这个Iess文件里面书写less语句，编译为css,引用</p><h4 id="Less变量"><a href="#Less变量" class="headerlink" title="Less变量"></a>Less变量</h4><p>1.变量命名规范<br>●必须有@为前缀<br>●不能包含特殊字符<br>●不能以数字开头<br>●大小写敏感</p><h4 id="Less编译"><a href="#Less编译" class="headerlink" title="Less编译"></a>Less编译</h4><p>本质上, Less包含-套自定义的语法及-一个解析器,用户根据这些语法定义自己的样式规则,这些规则<br>最终会通过解析器,编译生成对应的CSS文件上，所以,我们需要把我们的less文件,编译生成为css文件,这样我们的html页面才能使用。</p><h4 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h4><p>less嵌套子元素的样式直接写到父元素里面就好了 </p><p>如果有伪类、交集选择器、伪元素选择器我们内层选择器的前面需要加&amp;</p><h4 id="Less运算"><a href="#Less运算" class="headerlink" title="Less运算"></a>Less运算</h4><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加(+ )、减(-)、乘(*)、除(/)算术运算</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><p>●乘号(*)和除号(/)的写法，现在除法需要加括号：width：（750rem /  @num);<br>●运算符中间左右有个空格隔开1px + 5<br>●对于两个不同的单位的值之间的运算,运算结果的值取第一个值的单位<br>●如果两个值之间只有一 个值有单位 ,则运算结果就取该单位</p><h2 id="rem适配方案"><a href="#rem适配方案" class="headerlink" title="rem适配方案"></a>rem适配方案</h2><h4 id="1-我们适配的目标是什么"><a href="#1-我们适配的目标是什么" class="headerlink" title="1.我们适配的目标是什么?"></a>1.我们适配的目标是什么?</h4><p>1.让一些不能等比自适应的元素,达到当设备尺寸发生改变的时候,等比例适配当前设备。</p><h4 id="2-怎么去达到这个目标的"><a href="#2-怎么去达到这个目标的" class="headerlink" title="2.怎么去达到这个目标的?"></a>2.怎么去达到这个目标的?</h4><p>2.使用媒体查询根据不同设备按比例设置html的字体大小然后页面元素使用rem做尺寸单位,当htmI字体大小变化，元素尺寸也会发生变化,从而达到等比缩放的适配。</p><h4 id="3-在实际的开发当中使用"><a href="#3-在实际的开发当中使用" class="headerlink" title="3.在实际的开发当中使用?"></a>3.在实际的开发当中使用?</h4><p>①按照设计稿与设备宽度的比例,动态计算并设置html根标签的font-size大小; (媒体查询)<br>②CSS中,设计稿元素的宽、高、相对位置等取值,按照同等比例换算为rem为单位的值;</p><h4 id="rem适配方案技术使用-市场主流"><a href="#rem适配方案技术使用-市场主流" class="headerlink" title="rem适配方案技术使用(市场主流)"></a>rem适配方案技术使用(市场主流)</h4><p>技术方案1</p><p>●less</p><p>●媒体查询</p><p>●rem</p><p>技术方案2 (推荐)</p><p>●flexible.js</p><p>●rem </p><p>总结:<br>1.两种方案现在都存在。<br>2.方案2更简单,现阶段大家无需了解里面的js代码。</p><h5 id="rem实际开发适配方案1"><a href="#rem实际开发适配方案1" class="headerlink" title="rem实际开发适配方案1:"></a>rem实际开发适配方案1:</h5><p>rem +媒体查询+ less技术</p><p>1.设计稿常见尺寸宽度</p><div class="table-container"><table><thead><tr><th>设备</th><th>常见宽度</th></tr></thead><tbody><tr><td>iphone 4.5</td><td>640px</td></tr><tr><td>iphone 678</td><td>750px</td></tr><tr><td>Android</td><td>常见320px、360px、 375px、 384px、 400px、 414px. 500px、 720px<br>大部分4.7~5寸的安卓设备为720px</td></tr></tbody></table></div><h6 id="2-动态设置html标签font-size大小"><a href="#2-动态设置html标签font-size大小" class="headerlink" title="2.动态设置html标签font-size大小"></a>2.动态设置html标签font-size大小</h6><p>①假设设计稿是750px<br>②假设我们把整个屏幕划分为15等份(划分标准不一可以是20份也可以是10等份)<br>③每-份作为htm|字体大小,这里就是50px<br>④那么在320px设备的时候,字体大小为320/15就是21.33px<br>⑤用我们页面元素的大小除以不同的html字体大小会发现他们比例还是相同的<br>⑥比如我们以750为标准设计稿<br>⑦一个100<em>100像素的页面元素在750屏幕下，就是100/ 50转换为rem是2rem </em> 2 rem比例是1比1<br>⑧320屏幕下，html字体大小为21.33 则2rem= 42.66px此时宽和高都是42.66 但是宽和高的比例还是1比1<br>⑨但是已经能实现不同屏幕下页面元素盒子等比例缩放的效果</p><h6 id="3-元素大小取值方法"><a href="#3-元素大小取值方法" class="headerlink" title="3.元素大小取值方法"></a>3.元素大小取值方法</h6><p>①最后的公式:页面元素的rem值=页面元素值( px) / ( 屏幕宽度/划分的份数)<br>②屏幕宽度/划分的份数就是html font- size的大小<br>③或者:页面元素的rem值=页面元素值( px) / html font-size 字体大小    </p><h5 id="rem实际开发适配方案2"><a href="#rem实际开发适配方案2" class="headerlink" title="rem实际开发适配方案2:"></a>rem实际开发适配方案2:</h5><p>rem+flexible.js简洁高效</p><p>手机淘宝团队出的简洁高效移动端适配库<br>我们再也不需要在写不同屏幕的媒体查询,因为里面js做了处理,它的原理是把当前设备划分为10等份,但是不同设备下,比例还是一致的。<br>我们要做的,就是确定好我们当前设备的html字大小就可以了,比如当前设计稿是750px，那么我们只需要把html文字大小设置为75px(750px/ 10)就可以,里面页面元素rem值:页面元素的px值/ 75,剩余的让flexible.js来去算</p><h6 id="VSCode-px-转换rem插件cssrem"><a href="#VSCode-px-转换rem插件cssrem" class="headerlink" title="VSCode px 转换rem插件cssrem"></a>VSCode px 转换rem插件cssrem</h6><h1 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h1><h4 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><ul><li>概念：对不同屏幕尺寸做出响应，并进行相应布局</li><li>原理：使用媒体查询设置不同的断点，进行不同css布局响应</li><li>优点：一个网站可以兼容多种终端，不需要重复开发</li><li>缺点：工作量大、代码累赘、加载时间长、效率低、冗余代码较多</li><li>适用场景：结构比较简单，展示型网站</li><li>不适用场景：交互较多，功能性的网站不适用</li></ul><p>就是使用<strong>媒体查询</strong>针对不同宽度的设备进行<strong>布局和样式</strong>的设置,从而适配不同设备的目的。</p><div class="table-container"><table><thead><tr><th style="text-align:center">设备划分</th><th style="text-align:left">尺寸区间</th><th>响应式尺寸划分（一般情况）</th></tr></thead><tbody><tr><td style="text-align:center">超小屏幕(手机)</td><td style="text-align:left">&lt; 768px</td><td>100%</td></tr><tr><td style="text-align:center">小屏设备(平板)</td><td style="text-align:left">&gt;= 768px ~ &lt; 992px</td><td>750px</td></tr><tr><td style="text-align:center">中等屏幕(桌面显示器)</td><td style="text-align:left">&gt;= 992px ~ &lt; 1200px</td><td>970px</td></tr><tr><td style="text-align:center">宽屏设备(大桌面显示器)</td><td style="text-align:left">&gt;= 1200px</td><td>1170px</td></tr></tbody></table></div><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4><p>响应式需要一个父级做为布局容器 ,来配合子级元素来实现变化效果。<br>原理就是在不同屏幕下,通过媒体查询来改变这个布局容器的大小,再改变里面<strong>子元素的排列方式和大小</strong>,从而实现<br>不同屏幕下,看到不同的页面布局和样式变化。</p><h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><p>Bootstrap来自Twitter (推特) ,是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和JAVASCRIPT的，它简洁灵活,使得Web开发更加快捷。</p><p><strong>框架</strong>:顾名思义就是一套架构, 它有一套比较完整的网页功能解决方案 ,而且控制权在框架本身,有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><p>●中文官网: <a href="http://www.bootcss.com/">http://www.bootcss.com/</a><br>●官网: <a href="http://getbootstrap.com/">http://getbootstrap.com/</a></p><h4 id="Bootstrap优点"><a href="#Bootstrap优点" class="headerlink" title="Bootstrap优点"></a>Bootstrap优点</h4><p>●标准化的html + css编码规范<br>●提供了一套简洁、直观、强悼的组件<br>●有自己的生态圈,不断的更新迭代<br>●让开发更简单,提高了开发的效率</p><h4 id="Bootstrap使用四步曲"><a href="#Bootstrap使用四步曲" class="headerlink" title="Bootstrap使用四步曲:"></a>Bootstrap使用四步曲:</h4><p>1.创建文件夹结构2.创建html骨架结构3. 引入相关样式文件4. 书写内容</p><h4 id="Bootstrap布局容器"><a href="#Bootstrap布局容器" class="headerlink" title="Bootstrap布局容器"></a>Bootstrap布局容器</h4><p>Bootstrap需要为页面内容和栅格系统包裹一个.container容器, Bootstarp<strong>预先定义</strong>好了这个类,叫.container<br>它提供了两个作此用处的类。</p><ol><li><h5 id="container类"><a href="#container类" class="headerlink" title="container类"></a><strong>container类</strong></h5></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">设备划分</th><th style="text-align:left">尺寸区间</th><th>响应式尺寸划分（一般情况）</th></tr></thead><tbody><tr><td style="text-align:center">超小屏幕(手机)</td><td style="text-align:left">&lt; 768px</td><td>100%</td></tr><tr><td style="text-align:center">小屏设备(平板)</td><td style="text-align:left">&gt;= 768px ~ &lt; 992px</td><td>750px</td></tr><tr><td style="text-align:center">中等屏幕(桌面显示器)</td><td style="text-align:left">&gt;= 992px ~ &lt; 1200px</td><td>970px</td></tr><tr><td style="text-align:center">宽屏设备(大桌面显示器)</td><td style="text-align:left">&gt;= 1200px</td><td>1170px</td></tr></tbody></table></div><ol><li><h5 id="container-fluid类"><a href="#container-fluid类" class="headerlink" title="container-fluid类"></a>container-fluid类</h5><p>●流式布局容器百分百宽度<br>●占据全部视口( viewport )的容器。<br>●适合于单独做移动端开发</p></li></ol><h4 id="栅格系统简介"><a href="#栅格系统简介" class="headerlink" title="栅格系统简介"></a>栅格系统简介</h4><p>栅格系统英文为”grid systems” ,也有人翻译为“网格系统”，它是指将页面布局划分为等宽的列 ,然后通过列数的定义来模块化页面布局。</p><p>Bootstrap提供了一套响应式、 移动设备优先的流式栅格系统,随着屏幕或视口( viewport )尺寸的增加，系统会自动分为最多12列。</p><p>Bootstrap里面container宽度是固定的,但是不同屏幕下, container的宽度不同,我们再把container划分为12等份</p><h4 id="栅格选项参数"><a href="#栅格选项参数" class="headerlink" title="栅格选项参数"></a>栅格选项参数</h4><p>栅格系统用于通过一系列的行 ( row )与列( column )的组合来创建页面布局,你的内容就可以放入这些创建好的布局中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">设备划分</th><th style="text-align:left">尺寸区间</th><th>响应式尺寸划分（一般情况）</th><th>类前缀</th></tr></thead><tbody><tr><td style="text-align:center">超小屏幕(手机)</td><td style="text-align:left">&lt; 768px</td><td>100%</td><td>.col-xs-</td></tr><tr><td style="text-align:center">小屏设备(平板)</td><td style="text-align:left">&gt;= 768px ~ &lt; 992px</td><td>750px</td><td>.col-sm-</td></tr><tr><td style="text-align:center">中等屏幕(桌面显示器)</td><td style="text-align:left">&gt;= 992px ~ &lt; 1200px</td><td>970px</td><td>.col-md-</td></tr><tr><td style="text-align:center">宽屏设备(大桌面显示器)</td><td style="text-align:left">&gt;= 1200px</td><td>1170px</td><td>.col-lg-</td></tr></tbody></table></div><p>如果子元素的份数相加等于12，则子元素能占满整个的container的宽度</p><p>如果子元素的份数相加小于12，则占不满整个container的宽度，会有空白</p><p>如果子元素的份数相加大于12，则多于的那一列会另起一行显示</p><p>●按照不同屏幕划分为1~12等份<br>●行( row )可以法除父容器作用15px的边距</p><p>●行( row )必须放到container布局容器里面<br>●我们实现列的平均划分需要给列添加类前缀<br>●xs-extra small :超小; sm-small :小; md-medium :中等; lg-large :大;<br>●列( column)大于12 ,多余的“列( column )”所在的元素将被作为一个整体另起一行排列<br>●每一 列默认有左右15像素的padding值<br>●可以同时为一-列指定多个设备的类名,以便划分不同份数例如class=”col-md-4 col-sm-6”</p><h4 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h4><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再粉成若干份小列。我们可以通过添加一个新的.row元素和一系列.col-sm-<em>元素到已经存在的.col-sm-</em>元素内。</p><p>我们列嵌套最好加1个行row这样可以取消父元素的padding值而且高度自动和父级一样高</p><p><strong>实例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; col-md-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; col-md-6&quot;</span>&gt;</span>小列<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; col-md-6&quot;</span>&gt;</span>小列<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; col-md-4&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; col-md-4&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><p>使用.col-md-offset-number类可以将列向右侧偏移。这些类实际是通过使用*选择器为当前元素增加了左侧的边距( margin)。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><p>通过使用.col-md-push-number和.col-md-pull-number类就可以很容易的改变列( column )的顺序。</p><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 col-md-push-8&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8 col-md-pull-4&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h4><p>为了加快对移动设备友好的页面开发工作,利用媒体查询功能,并使用这些工具类可以方便的针对不同设备<br>展示或隐藏页面内容。</p><div class="table-container"><table><thead><tr><th>类名</th><th>超小屏</th><th>小屏</th><th>中屏</th><th>大屏</th></tr></thead><tbody><tr><td>hidden-xs</td><td>隐藏</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-md</td><td>可见</td><td>隐藏</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-lg</td><td>可见</td><td>可见</td><td>隐藏</td><td>可见</td></tr><tr><td>可见</td><td>可见</td><td>可见</td><td>可见</td><td>隐藏</td></tr></tbody></table></div><p>与之相反的,是visible-xs visible-sm visible-md visible-lg是显示某个页面内容</p><h6 id="Boorstrap清除浮动：clearfix"><a href="#Boorstrap清除浮动：clearfix" class="headerlink" title="Boorstrap清除浮动：clearfix"></a>Boorstrap清除浮动：clearfix</h6><h1 id="移动端布局总结"><a href="#移动端布局总结" class="headerlink" title="移动端布局总结"></a>移动端布局总结</h1><h3 id="移动端主流方案"><a href="#移动端主流方案" class="headerlink" title="移动端主流方案"></a>移动端主流方案</h3><h4 id="1-单独制作移动端页面-主流"><a href="#1-单独制作移动端页面-主流" class="headerlink" title="1.单独制作移动端页面(主流)"></a>1.单独制作移动端页面(主流)</h4><p>流式布局(百分比布局)</p><p>flex弹性布局(强烈推荐)</p><p>ess+rem+媒体查询布局</p><p>混合布局</p><h4 id="2-响应式页面兼容移动端-其次"><a href="#2-响应式页面兼容移动端-其次" class="headerlink" title="2.响应式页面兼容移动端(其次)"></a>2.响应式页面兼容移动端(其次)</h4><p>媒体查询</p><p>bootstarp</p><h3 id="移动端技术选型"><a href="#移动端技术选型" class="headerlink" title="移动端技术选型"></a>移动端技术选型</h3><ul><li><h5 id="流式布局-百分比布局"><a href="#流式布局-百分比布局" class="headerlink" title="流式布局(百分比布局)"></a>流式布局(百分比布局)</h5></li><li><h5 id="flex弹性布局-推荐"><a href="#flex弹性布局-推荐" class="headerlink" title="flex弹性布局(推荐)"></a>flex弹性布局(推荐)</h5></li><li><h5 id="rem适配布局-推荐"><a href="#rem适配布局-推荐" class="headerlink" title="rem适配布局(推荐)"></a>rem适配布局(推荐)</h5></li><li><h5 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h5><p>建议:我们选取一种主要技术选型,其他技术做为辅助,这种混合技术开发</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式开发 </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call 和apply的作用与区别</title>
      <link href="/2022/12/09/call%20%E5%92%8Capply%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/12/09/call%20%E5%92%8Capply%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[ <p style="margin-top:30px;"></p><p>首先先说明它们共同的作用：call和apply 都是用来修改函数中this的指向问题；</p><p>其次就是它们不同的传参方式：注意上一句话中说他们的作用时有两个关键词 ‘函数’和‘this’，想要修改this 的指向，那么必然有一个this修改后的指向，而函数必然后关系到传参问题：call方法可以传给该函数的参数分别作为自己的多个参数，而apply方法必须将传给该函数的参数合并成一个<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&amp;spm=1001.2101.3001.7020">数组</a>作为自己的一个参数：</p><p>eg: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Evan&#x27;</span>;<span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<span class="hljs-keyword">var</span> person = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hillary&#x27;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,    <span class="hljs-attr">sayIntroduce</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, My name is &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; and I&#x27;m &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old.&#x27;</span>    &#125;,    <span class="hljs-attr">sayHobby</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val1, val2</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;, I like &quot;</span> + val1 + <span class="hljs-string">&quot; and &quot;</span> + val2 + <span class="hljs-string">&quot;.&quot;</span>;    &#125;&#125;<span class="hljs-keyword">var</span> person1 = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Coy&#x27;</span>&#125;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">sayIntroduce</span>()); <span class="hljs-comment">// Hello, My name is Hillary and I&#x27;m 19 years old.</span><br></code></pre></td></tr></table></figure><p>当我们通过 call 和 apply 来this的指向时，不传任何参数，则默认为将this指向修改为  windows</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当没有参数时，默认将this指向 window console.log(person.sayIntroduce.call()); // Hello, My name is Evan and I&#x27;m 20 years old. console.log(person.sayIntroduce.apply()); // Hello, My name is Evan and I&#x27;m 20 years old.</span><br></code></pre></td></tr></table></figure><p>有参数时，this 指向第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将this指向 person1，由于person1中没有age属性，因此为 undefinedconsole.log(person.sayIntroduce.call(person1)); // Hello, My name is Coy and I&#x27;m undefined years old.console.log(person.sayIntroduce.apply(person1)); // Hello, My name is Coy and I&#x27;m undefined years old.</span><br></code></pre></td></tr></table></figure><p>当需要传递参数时，call可以直接写多个参数，apply需要用数组方式传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">sayHobby</span>.<span class="hljs-title function_">call</span>(person1, <span class="hljs-string">&#x27;swimming&#x27;</span>, <span class="hljs-string">&#x27;hiking&#x27;</span>)); <span class="hljs-comment">// I&#x27;m Coy, I like swimming and hiking.console.log(person.sayHobby.apply(person1, [&#x27;swimming&#x27;, &#x27;hiking&#x27;])); // I&#x27;m Coy, I like swimming and hiking.</span><br></code></pre></td></tr></table></figure><p>下面是一个构造函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数应用function Grade(max, min, average) &#123;    this.max = max;    this.min = min;    this.average = average;&#125; function Subject(subjectName,max, min, average) &#123;    Grade.call(this, max, min, average);    this.subjectName = subjectName;&#125;var math = new Subject(&#x27;math&#x27;, 99, 60, 80);console.log(math);</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟理解ES6箭头函数</title>
      <link href="/2022/12/09/10%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3ES6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/09/10%E5%88%86%E9%92%9F%E7%90%86%E8%A7%A3ES6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>面试中，<a href="https://so.csdn.net/so/search?q=ES6&amp;spm=1001.2101.3001.7020">ES6</a> 是一大考点，当被问到箭头函数时，我们都会说：箭头函数很好用，而且再也不用操心 this 的指向了。<br>面试官：<strong>箭头函数是挺好用的，那有哪些不适合使用箭头函数的场景呢？</strong></p></blockquote><p><a href="https://so.csdn.net/so/search?q=%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020">箭头函数</a>在大多数情况下，是很好用的，但是为什么在有些场景，使用箭头函数后会产生问题？是不是箭头函数还不够完善？又有哪些场景会发生问题？该如何解决呢？为了防止血案的产生，重新吧这一块拎出来整理巩固一下。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>ES6允许使用<code>箭头（=&gt;）定义函</code>数，箭头函数提供了一种更加简洁的函数书写方式，箭头函数<code>多用于匿名函数的定义</code>；</p></blockquote><h2 id="箭头函数的注意点："><a href="#箭头函数的注意点：" class="headerlink" title="箭头函数的注意点："></a>箭头函数的注意点：</h2><ol><li><p>如果形参只有一个，则小括号可以省略；</p></li><li><p>函数体如果只有一条语句，则花括号可以省略，并省略return，函数的返回值为该条语句的执行结果；</p></li><li><p>箭头函数 this 指向声明时所在作用域下 this 的值；</p></li><li><p>箭头函数不能作为构造函数实例化；</p></li><li><p>不能使用 arguments；</p></li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote><ol><li>箭头函数的this<code>是静态的</code>，<code>始终指向函数声明时所在作用域下的this</code>的值；</li><li>不能作为构造实例化对象；</li><li>不能使用 arguments 变量；</li></ol></blockquote><h2 id="箭头函数的写法"><a href="#箭头函数的写法" class="headerlink" title="箭头函数的写法"></a>箭头函数的写法</h2><p>为什么叫箭头函数( Arrow Function )？因为它的写法，看上去就是一个箭头：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">const multiply = num =&gt; num * num;<br></code></pre></td></tr></table></figure><p>它等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> multiply = <span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">return</span> num * num;<br>&#125;;<br></code></pre></td></tr></table></figure><p>此外，还可以传多个参数，以及可变参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 多参数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">multiply</span> = (<span class="hljs-params">num1, num2</span>) =&gt; num1 * num2;<br><br><span class="hljs-comment">// 可变参数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2, ...rest</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> result = num1 + num2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; rest.<span class="hljs-property">length</span>; i++) &#123;<br>        result += rest[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当有多条语句时，需要配上 <code>&#123;...&#125;</code> 和 <code>return</code>。</p><p>另外，如果返回的结果是对象，则需要配上 <code>()</code>，像下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">func</span> = val =&gt; (&#123; <span class="hljs-attr">value</span>: val &#125;);<br></code></pre></td></tr></table></figure><p>从上述的写法来看，相较普通函数而言，箭头函数的确简便了很多，提升了我们代码的易用性。但它并非在任何场景下都适用，接下来，将会介绍几种不适合箭头函数的场景，并会提出可行的解决方案。</p><h2 id="不适合的场景"><a href="#不适合的场景" class="headerlink" title="不适合的场景"></a>不适合的场景</h2><h4 id="1、对象的方法"><a href="#1、对象的方法" class="headerlink" title="1、对象的方法"></a>1、对象的方法</h4><p>看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">print</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">// =&gt; true</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// undefined</span><br>    &#125;<br>&#125;;<br><br>obj.<span class="hljs-title function_">print</span>();<br></code></pre></td></tr></table></figure><p>this.x 打印出来是 undefined。为什么？然后，我在上面加了一行，发现 this 指向了 window。</p><p>解析：print 方法用了箭头函数，其内部的 this 指向的还是上下文 window，上下文中并没有定义 x，所以 this.x 输出为 undefined。</p><p>解决办法：用 ES6 的短语法，或者传统的函数表达式都可以。所以，print 要这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">print () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === test); <span class="hljs-comment">// =&gt; true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>); <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、原型方法"><a href="#2、原型方法" class="headerlink" title="2、原型方法"></a>2、原型方法</h4><p>同样的规则也适用于原型方法的定义，使用箭头函数会导致运行时的执行上下文错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cat</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-title class_">Cat</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayCatName</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">// =&gt; true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;Miao&#x27;</span>);<br>cat.<span class="hljs-title function_">sayCatName</span>(); <span class="hljs-comment">// =&gt; undefined</span><br></code></pre></td></tr></table></figure><p>解决办法是：用回传统的函数表达式，像下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Cat</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayCatName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === cat); <span class="hljs-comment">// =&gt; true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>sayCatName 变回传统的函数表达式之后，被调用时的执行上下文就会指向新创建的 cat 实例。</p><h4 id="3、事件的回调"><a href="#3、事件的回调" class="headerlink" title="3、事件的回调"></a>3、事件的回调</h4><p>看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myButton&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>); <span class="hljs-comment">// =&gt; true</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;Clicked button&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里会有问题，因为 this 指向了 window。</p><p>解析：当为一个 DOM 事件绑定回调函数后，触发回调函数时的 this，需要指向当前发生事件的 DOM 节点，也就是这里的 btn。当回调发生时，浏览器会用 btn 的上下文去调用处理函数。所以最后的 this.innerHTML 等价于 window.innerHTML，问题就在这里。</p><p>解决办法：用函数表达式代替箭头函数。像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === btn); <span class="hljs-comment">// =&gt; true</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;Clicked button&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>另外，在 react 中的事件回调，也经常会遇到类似的问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">// jsx render<br><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClickButton.bind(this)&#125;</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br><br>// callback<br>handleClickButton () &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：这里 onClick 的回调函数，并非字符串，而是一个实实在在的函数。可以将 onClick 理解为一个中间变量，所以 react 在处理函数时的 this 指向就会丢失。</p><p>为了解决这个问题，我们需要为回调函数绑定 this，使得事件处理函数无论如何传递，this 都指向我们实例化的那个对象。</p><p>在这里，如果用箭头函数，可以这样改写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">event</span> =&gt;</span> this.handleClickButton(event) &#125;&gt;<br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>箭头函数并没有自己的 this，所以事件处理函数的调用者并不受影响。</p><h4 id="4、构造函数"><a href="#4、构造函数" class="headerlink" title="4、构造函数"></a>4、构造函数</h4><p>箭头函数不能通过 new 关键字调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Message</span> = (<span class="hljs-params">text</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text;<br>&#125;;<br><br><span class="hljs-keyword">var</span> helloMessage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br><span class="hljs-comment">// Uncaught TypeError: Message is not a constructor</span><br></code></pre></td></tr></table></figure><p>解析：从报错信息可以看出，箭头函数没有 constructor 方法，所以不能用作构造函数。 JavaScript 会通过抛出异常的方式，进行隐式地预防。</p><p>解决方法：用函数表达式代替箭头函数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回顾 MDN 给出的解释：箭头函数表达式的语法比函数表达式更短，并且<code>没有自己的this，arguments，super或 new.target</code>。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p><p>所以说，箭头函数无疑是 ES6 带来的重大改进，在正确的场合使用箭头函数，能让代码变得更加简洁短小。但箭头函数也不是万能的，不能用的时候，千万别硬往上套。比如，<strong>在需要动态上下文的场景中，使用箭头函数需要格外地小心，这些场景包括：对象的方法、原型方法、事件的回调、构造函数</strong>。并非一定要用箭头函数，才能解决问题。</p><ol><li>箭头函数适合与 <code>this 无关的回调. 定时器, 数组的方法回调</code></li><li>箭头函数不适合与 this 有关的回调. <code>事件回调, 对象的方法</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
            <tag> 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>resetFields()方法重置表单无效的坑</title>
      <link href="/2022/12/09/this.$refs%5B%E2%80%98form%E2%80%98%5D.resetFields()%E6%96%B9%E6%B3%95%E9%87%8D%E7%BD%AE%E8%A1%A8%E5%8D%95%E6%97%A0%E6%95%88%E7%9A%84%E5%9D%91/"/>
      <url>/2022/12/09/this.$refs%5B%E2%80%98form%E2%80%98%5D.resetFields()%E6%96%B9%E6%B3%95%E9%87%8D%E7%BD%AE%E8%A1%A8%E5%8D%95%E6%97%A0%E6%95%88%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>在做后台在使用 element-ui 框架，开发过程中出现 resetFields表单无法重置的问题。因 “添加” 和 “编辑” 字段是一样的，所以我把它们放在了一个弹框表单里面，也节省了代码资源开销，如果你是分开写的弹框也就不会出现这个问题了。<br>重现步骤：进入列表页后，先打开编辑框，然后打开新增框，新增框会填充第一次打开的编辑框内容</p><blockquote><p>this.$refs[‘form’].resetFields()方法重置<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E5%8D%95&amp;spm=1001.2101.3001.7020">表单</a>无效的坑</p></blockquote><h2 id="1、用法不对"><a href="#1、用法不对" class="headerlink" title="1、用法不对"></a>1、用法不对</h2><p>要想this.$refs[‘form’].resetFields()方法有效，必须配置el-form :<a href="https://so.csdn.net/so/search?q=model&amp;spm=1001.2101.3001.7020">model</a> 属性和el-form-item中的prop属性，才可以。</p><p>注意：this.$refs[‘form’].resetFields()这个做法其实是重置表单到初始值，不是清空表单，当表单第一次在页面中渲染时所用的数据就是初始数据。</p><h2 id="2、坑1"><a href="#2、坑1" class="headerlink" title="2、坑1"></a>2、坑1</h2><p>在还没有显示对话框之前就调用this.$refs[‘form’].resetFields()，会报错。</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">this.$nextTick(() =&gt; &#123;<br>    this.$refs[&#x27;form&#x27;].resetFields();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3、坑2"><a href="#3、坑2" class="headerlink" title="3、坑2"></a>3、坑2</h2><p>如果添加和修改共用一个表单时就会出现重置无效的情况。</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">this.$nextTick(() =&gt; &#123;<br>    utils.copyFormObject(data, this.form);<br>&#125;);<br></code></pre></td></tr></table></figure><p>将为表单对象赋值的操作放在对话框显示之后的一个执行周期执行。</p><h2 id="4、为什么要放在-nextTick-中就可以了"><a href="#4、为什么要放在-nextTick-中就可以了" class="headerlink" title="4、为什么要放在$nextTick()中就可以了"></a>4、为什么要放在$nextTick()中就可以了</h2><p>this.$refs[‘form’].resetFields()这个做法其实是重置表单到初始值，不是清空表单，当表单第一次在页面中渲染时所用的数据就是初始数据，如果修改对象的表单赋值没有放在nextTick中，就会在表单渲染时就会将这个修改对象作为初始值，所以出现无效了。使用nextTick保证表单在第一次渲染时是空值就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6三种暴露方法详解</title>
      <link href="/2022/12/09/ES6%E4%B8%89%E7%A7%8D%E6%9A%B4%E9%9C%B2%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/12/09/ES6%E4%B8%89%E7%A7%8D%E6%9A%B4%E9%9C%B2%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="多行暴露"><a href="#多行暴露" class="headerlink" title="多行暴露"></a>多行暴露</h4><p>导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//a.js<br><br>export function aa1()&#123;<br>    console.log(&#x27;分别导出1&#x27;);<br>&#125;<br>export function aa2()&#123;<br>    console.log(&#x27;分别导出2&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//index.js<br><br>//解构赋值<br>import &#123; aa1 , aa2 &#125; from &#x27;a.js&#x27;<br></code></pre></td></tr></table></figure><h4 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h4><p>导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//b.js<br><br>function bb1()&#123;<br>    console.log(&#x27;综合导出1&#x27;);<br>&#125;<br>function bb2()&#123;<br>    console.log(&#x27;综合导出2&#x27;);<br>&#125;<br><br>export &#123;bb1,bb2&#125;<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//index.js<br><br>//解构赋值<br>import &#123;aa1,aa2&#125; from &#x27;b.js&#x27;<br></code></pre></td></tr></table></figure><h4 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h4><p>导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//c.js<br><br>export default function cc()&#123;<br>    console.log(&#x27;默认导出&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//index.js<br><br>//使用定义变量<br>import c from &#x27;c.js&#x27;<br>c.cc()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
            <tag> commonJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX的学习笔记(Node.js环境)</title>
      <link href="/2022/12/09/AJAX%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(Node.js%E7%8E%AF%E5%A2%83)/"/>
      <url>/2022/12/09/AJAX%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(Node.js%E7%8E%AF%E5%A2%83)/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX的学习笔记-Node-js环境"><a href="#AJAX的学习笔记-Node-js环境" class="headerlink" title="AJAX的学习笔记(Node.js环境)"></a>AJAX的学习笔记(Node.js环境)</h1><p>AJAX学习的笔记，主要环境为Node.js</p><p>课程地址： <a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></p><h2 id="第一章-Ajax概述"><a href="#第一章-Ajax概述" class="headerlink" title="第一章 Ajax概述"></a>第一章 Ajax概述</h2><h3 id="1-1-Ajax简介"><a href="#1-1-Ajax简介" class="headerlink" title="1.1 Ajax简介"></a>1.1 Ajax简介</h3><ul><li>Ajax即Asynchronous Javascript And XML（异步JavaScript和XML）</li><li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li><li>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li></ul><h3 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h3><ul><li>XML：可扩展标记语言</li><li>XML：被设计用来传输和存储数据</li><li>XML和HTML类似，不同点：HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签，用来表示一些数据</li><li>现在已被JSON取代</li></ul><h3 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h3><h4 id="1-3-1-AJAX的优点"><a href="#1-3-1-AJAX的优点" class="headerlink" title="1.3.1 AJAX的优点"></a>1.3.1 AJAX的优点</h4><ol><li>可以无刷新页面与服务端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h4 id="1-3-2-AJAX-的缺点"><a href="#1-3-2-AJAX-的缺点" class="headerlink" title="1.3.2 AJAX 的缺点"></a>1.3.2 AJAX 的缺点</h4><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li><li>SEO不友好（爬虫获取不到信息）</li></ol><h2 id="第二章-原生AJAX"><a href="#第二章-原生AJAX" class="headerlink" title="第二章 原生AJAX"></a>第二章 原生AJAX</h2><h3 id="2-1-HTTP"><a href="#2-1-HTTP" class="headerlink" title="2.1 HTTP"></a>2.1 HTTP</h3><p><strong>约定, 规则</strong><br>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p><h4 id="2-1-1-请求报文"><a href="#2-1-1-请求报文" class="headerlink" title="2.1.1 请求报文"></a>2.1.1 请求报文</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">行      POST  /s?ie=utf-8  HTTP/1.1 <br>头      Host: atguigu.com<br>        Cookie: name=guigu<br>        Content-type: application/x-www-form-urlencoded<br>        User-Agent: chrome 83<br>空行<br>体      username=admin&amp;password=admin<br></code></pre></td></tr></table></figure><h4 id="2-1-2-响应报文"><a href="#2-1-2-响应报文" class="headerlink" title="2.1.2 响应报文"></a>2.1.2 响应报文</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">行      HTTP/1.1  200  OK<br>头      Content-Type: text/html;charset=utf-8<br>        Content-length: 2048<br>        Content-encoding: gzip<br>空行    <br>体      &lt;html&gt;<br>            &lt;head&gt;<br>            &lt;/head&gt;<br>            &lt;body&gt;<br>                &lt;h1&gt;尚硅谷&lt;/h1&gt;<br>            &lt;/body&gt;<br>        &lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2-express框架的基本使用"><a href="#2-2-express框架的基本使用" class="headerlink" title="2.2 express框架的基本使用"></a>2.2 express框架的基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//1. 引入express<br>const express = require(&#x27;express&#x27;);<br><br>//2. 创建应用对象<br>const app = express();<br><br>//3. 创建路由规则<br>// request 是对请求报文的封装<br>// response 是对响应报文的封装<br>app.get(&#x27;/&#x27;, (request, response)=&gt;&#123;<br>    //设置响应<br>    response.send(&#x27;HELLO EXPRESS&#x27;);<br>&#125;);<br><br>//4. 监听端口启动服务<br>app.listen(8000, ()=&gt;&#123;<br>    console.log(&quot;服务已经启动, 8000 端口监听中....&quot;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-3-Ajax-GET请求"><a href="#2-3-Ajax-GET请求" class="headerlink" title="2.3 Ajax GET请求"></a>2.3 Ajax GET请求</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//1. 创建对象<br>const xhr = new XMLHttpRequest();<br>//2. 初始化 设置请求方法和 url<br>xhr.open(&#x27;GET&#x27;, &#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;);<br>//3. 发送<br>xhr.send();<br>//4. 事件绑定 处理服务端返回的结果<br>// on  when 当....时候<br>// readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4<br>// change  改变<br>xhr.onreadystatechange = function()&#123;<br>    //判断 (服务端返回了所有的结果)<br>    if(xhr.readyState === 4)&#123;<br>        //判断响应状态码 200  404  403 401 500<br>        // 2xx 成功<br>        if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;<br>            //处理结果  行 头 空行 体<br>            //响应 <br>            // console.log(xhr.status);//状态码<br>            // console.log(xhr.statusText);//状态字符串<br>            // console.log(xhr.getAllResponseHeaders());//所有响应头<br>            // console.log(xhr.response);//响应体<br>            //设置 result 的文本<br>            result.innerHTML = xhr.response;<br>        &#125;else&#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//1. 引入express<br>const express = require(&#x27;express&#x27;);<br><br>//2. 创建应用对象<br>const app = express();<br><br>//3. 创建路由规则<br>// request 是对请求报文的封装<br>// response 是对响应报文的封装<br>app.get(&#x27;/server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    //设置响应体<br>    response.send(&#x27;HELLO AJAX - 2&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-4-Ajax-POST-请求"><a href="#2-4-Ajax-POST-请求" class="headerlink" title="2.4 Ajax POST 请求"></a>2.4 Ajax POST 请求</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//1. 创建对象<br> const xhr = new XMLHttpRequest();<br> //2. 初始化 设置类型与 URL<br> xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/server&#x27;);<br> //设置请求头  Content-Type 设置请求体（参数查询字符串）的类型<br> xhr.setRequestHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);<br> xhr.setRequestHeader(&#x27;name&#x27;,&#x27;atguigu&#x27;);<br> //3. 发送 携带参数 请求体<br> xhr.send(&#x27;a=100&amp;b=200&amp;c=300&#x27;);<br> // xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);<br> // xhr.send(&#x27;1233211234567&#x27;);<br><br> //4. 事件绑定<br> xhr.onreadystatechange = function()&#123;<br>     //判断<br>     if(xhr.readyState === 4)&#123;<br>         if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;<br>             //处理服务端返回的结果<br>             result.innerHTML = xhr.response;<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//可以接收任意类型的请求 <br>app.all(&#x27;/server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    //响应头<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    //设置响应体<br>    response.send(&#x27;HELLO AJAX POST&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-5-JSON-响应"><a href="#2-5-JSON-响应" class="headerlink" title="2.5 JSON 响应"></a>2.5 JSON 响应</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//发送请求<br> const xhr = new XMLHttpRequest();<br> //设置响应体数据的类型<br> xhr.responseType = &#x27;json&#x27;;<br> //初始化<br> xhr.open(&#x27;GET&#x27;,&#x27;http://127.0.0.1:8000/json-server&#x27;);<br> //发送<br> xhr.send();<br> //事件绑定<br> xhr.onreadystatechange = function()&#123;<br>     if(xhr.readyState === 4)&#123;<br>         if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;<br>             //<br>             // console.log(xhr.response);<br>             // result.innerHTML = xhr.response;<br>             // 1. 手动对数据转化<br>             // let data = JSON.parse(xhr.response);<br>             // console.log(data);<br>             // result.innerHTML = data.name;<br>             // 2. 自动转换<br>             console.log(xhr.response);<br>             result.innerHTML = xhr.response.name;<br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//JSON 响应<br>app.all(&#x27;/json-server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    //响应头<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    //响应一个数据<br>    const data = &#123;<br>        name: &#x27;atguigu&#x27;<br>    &#125;;<br>    //对对象进行字符串转换<br>    let str = JSON.stringify(data);<br>    //设置响应体<br>    response.send(str);<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="2-6-IE缓存问题"><a href="#2-6-IE缓存问题" class="headerlink" title="2.6 IE缓存问题"></a>2.6 IE缓存问题</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const xhr = new XMLHttpRequest();<br>xhr.open(&quot;GET&quot;,&#x27;http://127.0.0.1:8000/ie?t=&#x27;+Date.now());<br>xhr.send();<br>xhr.onreadystatechange = function()&#123;<br>    if(xhr.readyState === 4)&#123;<br>        if(xhr.status &gt;= 200 &amp;&amp; xhr.status&lt; 300)&#123;<br>            result.innerHTML = xhr.response;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//针对 IE 缓存<br>app.get(&#x27;/ie&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    //设置响应体<br>    response.send(&#x27;HELLO IE - 5&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-7-超时与网络异常"><a href="#2-7-超时与网络异常" class="headerlink" title="2.7 超时与网络异常"></a>2.7 超时与网络异常</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const xhr = new XMLHttpRequest();<br>//超时设置 2s 设置<br>xhr.timeout = 2000;<br>//超时回调<br>xhr.ontimeout = function()&#123;<br>    alert(&quot;网络异常, 请稍后重试!!&quot;);<br>&#125;<br>//网络异常回调<br>xhr.onerror = function()&#123;<br>    alert(&quot;你的网络似乎出了一些问题!&quot;);<br>&#125;<br><br>xhr.open(&quot;GET&quot;,&#x27;http://127.0.0.1:8000/delay&#x27;);<br>xhr.send();<br>xhr.onreadystatechange = function()&#123;<br>    if(xhr.readyState === 4)&#123;<br>        if(xhr.status &gt;= 200 &amp;&amp; xhr.status&lt; 300)&#123;<br>            result.innerHTML = xhr.response;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//延时响应<br>app.all(&#x27;/delay&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    setTimeout(() =&gt; &#123;<br>        //设置响应体<br>        response.send(&#x27;延时响应&#x27;);<br>    &#125;, 1000)<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-8-取消请求"><a href="#2-8-取消请求" class="headerlink" title="2.8 取消请求"></a>2.8 取消请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x = new XMLHttpRequest();<br>x.abort();<br></code></pre></td></tr></table></figure><h3 id="2-9-重复请求问题"><a href="#2-9-重复请求问题" class="headerlink" title="2.9 重复请求问题"></a>2.9 重复请求问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//获取元素对象<br>const btns = document.querySelectorAll(&#x27;button&#x27;);<br>let x = null;<br>//标识变量<br>let isSending = false; // 是否正在发送AJAX请求<br><br>btns[0].onclick = function()&#123;<br>    //判断标识变量<br>    if(isSending) x.abort();// 如果正在发送, 则取消该请求, 创建一个新的请求<br>    x = new XMLHttpRequest();<br>    //修改 标识变量的值<br>    isSending = true;<br>    x.open(&quot;GET&quot;,&#x27;http://127.0.0.1:8000/delay&#x27;);<br>    x.send();<br>    x.onreadystatechange = function()&#123;<br>        if(x.readyState === 4)&#123;<br>            //修改标识变量<br>            isSending = false;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三章-jQuery中的AJAX"><a href="#第三章-jQuery中的AJAX" class="headerlink" title="第三章 jQuery中的AJAX"></a>第三章 jQuery中的AJAX</h2><h3 id="3-1-get请求"><a href="#3-1-get请求" class="headerlink" title="3.1 get请求"></a>3.1 get请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$.get(url, [data], [callback], [type])<br>url: 请求的URL地址<br>data: 请求携带的参数<br>callback: 载入成功时回调函数<br>type：设置返回内容格式，xml、html、script、json、text、_default<br></code></pre></td></tr></table></figure><h3 id="3-2-post请求"><a href="#3-2-post请求" class="headerlink" title="3.2 post请求"></a>3.2 post请求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$.post(url,[data],[callback],[type]<br>url:请求的URL地址<br>data:请求携带的参数<br>callback:载入成功时的回调函数<br>type:设置返回内容格式，xml,html,script,json,text,__default<br></code></pre></td></tr></table></figure><h3 id="3-3-通用型方法ajax"><a href="#3-3-通用型方法ajax" class="headerlink" title="3.3 通用型方法ajax"></a>3.3 通用型方法ajax</h3><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$(&#x27;button&#x27;).eq(2).click(function()&#123;<br>$.ajax(&#123;<br>    //url<br>    url: &#x27;http://127.0.0.1:8000/jquery-server&#x27;,<br>    //参数<br>    data: &#123;a:100, b:200&#125;,<br>    //请求类型<br>    type: &#x27;GET&#x27;,<br>    //响应体结果<br>    dataType: &#x27;json&#x27;,<br>    //成功的回调<br>    success: function(data)&#123;<br>        console.log(data);<br>    &#125;,<br>    //超时时间<br>    timeout: 2000,<br>    //失败的回调<br>    error: function()&#123;<br>        console.log(&#x27;出错啦!!&#x27;);<br>    &#125;,<br>    //头信息<br>    headers: &#123;<br>        c:300,<br>        d:400<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//jQuery 服务<br>app.all(&#x27;/jquery-server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    // response.send(&#x27;Hello jQuery AJAX&#x27;);<br>    const data = &#123;name:&#x27;尚硅谷&#x27;&#125;;<br>    response.send(JSON.stringify(data));<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="第四章-axios"><a href="#第四章-axios" class="headerlink" title="第四章 axios"></a>第四章 axios</h2><h3 id="4-1-GET"><a href="#4-1-GET" class="headerlink" title="4.1 GET"></a>4.1 GET</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//GET 请求<br>axios.get(&#x27;/axios-server&#x27;, &#123;<br>     //url 参数<br>     params: &#123;<br>         id: 100,<br>         vip: 7<br>     &#125;,<br>     //请求头信息<br>     headers: &#123;<br>         name: &#x27;atguigu&#x27;,<br>         age: 20<br>     &#125;<br> &#125;).then(value =&gt; &#123;<br>     console.log(value);<br> &#125;);<br></code></pre></td></tr></table></figure><h3 id="4-2-POST"><a href="#4-2-POST" class="headerlink" title="4.2 POST"></a>4.2 POST</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">axios.post(&#x27;/axios-server&#x27;, &#123;<br>    username: &#x27;admin&#x27;,<br>    password: &#x27;admin&#x27;<br>&#125;, &#123;<br>    //url <br>    params: &#123;<br>        id: 200,<br>        vip: 9<br>    &#125;,<br>    //请求头参数<br>    headers: &#123;<br>        height: 180,<br>        weight: 180,<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-3-通用型"><a href="#4-3-通用型" class="headerlink" title="4.3 通用型"></a>4.3 通用型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">axios(&#123;<br>    //请求方法<br>    method : &#x27;POST&#x27;,<br>    //url<br>    url: &#x27;/axios-server&#x27;,<br>    //url参数<br>    params: &#123;<br>        vip:10,<br>        level:30<br>    &#125;,<br>    //头信息<br>    headers: &#123;<br>        a:100,<br>        b:200<br>    &#125;,<br>    //请求体参数<br>    data: &#123;<br>        username: &#x27;admin&#x27;,<br>        password: &#x27;admin&#x27;<br>    &#125;<br>&#125;).then(response=&gt;&#123;<br>    //响应状态码<br>    console.log(response.status);<br>    //响应状态字符串<br>    console.log(response.statusText);<br>    //响应头信息<br>    console.log(response.headers);<br>    //响应体<br>    console.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-4-服务器端"><a href="#4-4-服务器端" class="headerlink" title="4.4 服务器端"></a>4.4 服务器端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//axios 服务<br>app.all(&#x27;/axios-server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    // response.send(&#x27;Hello jQuery AJAX&#x27;);<br>    const data = &#123;name:&#x27;尚硅谷&#x27;&#125;;<br>    response.send(JSON.stringify(data));<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="第五章-fetch"><a href="#第五章-fetch" class="headerlink" title="第五章 fetch"></a>第五章 fetch</h2><ul><li>前端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">fetch(&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;, &#123;<br>    //请求方法<br>    method: &#x27;POST&#x27;,<br>    //请求头<br>    headers: &#123;<br>        name:&#x27;atguigu&#x27;<br>    &#125;,<br>    //请求体<br>    body: &#x27;username=admin&amp;password=admin&#x27;<br>&#125;).then(response =&gt; &#123;<br>    // return response.text();<br>    return response.json();<br>&#125;).then(response=&gt;&#123;<br>    console.log(response);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>服务器端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//fetch 服务<br>app.all(&#x27;/fetch-server&#x27;, (request, response) =&gt; &#123;<br>    //设置响应头  设置允许跨域<br>    response.setHeader(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);<br>    response.setHeader(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;*&#x27;);<br>    // response.send(&#x27;Hello jQuery AJAX&#x27;);<br>    const data = &#123;name:&#x27;尚硅谷&#x27;&#125;;<br>    response.send(JSON.stringify(data));<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="第六章：-跨域"><a href="#第六章：-跨域" class="headerlink" title="第六章： 跨域"></a>第六章： 跨域</h2><h3 id="6-1-同源策略"><a href="#6-1-同源策略" class="headerlink" title="6.1 同源策略"></a>6.1 同源策略</h3><p>同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。</p><p>同源：协议、域名、端口号 必须完全相同</p><p>违背同源策略就是跨域</p><h3 id="6-2-如何解决跨域"><a href="#6-2-如何解决跨域" class="headerlink" title="6.2 如何解决跨域"></a>6.2 如何解决跨域</h3><h4 id="6-2-1-JSONP"><a href="#6-2-1-JSONP" class="headerlink" title="6.2.1 JSONP"></a>6.2.1 JSONP</h4><ol><li><p>JSONP是什么</p><p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求</p></li><li><p>JSONP 怎么工作的？</p><p>在网页有一些标签天生具有跨域能力，比如：img, link, iframe, script</p><p>JSONP就是利用<strong>script</strong>标签的跨域能力来发送请求的</p><ol><li>JSONP的使用</li></ol><ul><li>动态的创建一个script标签</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var script = document.createElement(&quot;script&quot;);<br></code></pre></td></tr></table></figure><ul><li>设置script的src，设置回调函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">script.src = &quot;http://locallhost:3000/textAJAX?callback=abc&quot;<br></code></pre></td></tr></table></figure><h3 id="6-2-2-CORS"><a href="#6-2-2-CORS" class="headerlink" title="6.2.2 CORS"></a>6.2.2 CORS</h3><p>推荐阅读：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access\_control\_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access\_control\_CORS</a></li></ul><ol><li><p>CORS是什么？</p><p>CORS (Cross-Origin Resource Sharing), 跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 等请求。跨域资源共享标准新增了一组 HTTP 首部字段（响应头），允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p></li><li><p>CORS怎么工作的？</p><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></li><li><p>CORS 的使用</p><p>主要是服务端的设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rounter.get(&quot;/testAJAX&quot;,function(req, res)&#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> axios </tag>
            
            <tag> http </tag>
            
            <tag> json </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/2022/12/07/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/07/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开始教程之前，你可以了解一下使用gitee pages服务搭建博客有哪些好处：</p><ul><li>gitee 是国内的网站，相较于 github 访问速度更快；</li><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>数据绝对安全，基于gitee的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>等等。</li></ul><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始一切之前，你必须已经：</p><ul><li>有一个gitee账号，没有的话去注册一个（邮箱注册，需要验证）；</li><li>安装了node.js并了解相关基础知识（主要用于安装hexo依赖）；</li><li>安装了git for windows（或者其它git客户端）</li></ul><p>注册地址：<a href="https://gitee.com/">码云</a><br>本文所使用的环境：</p><ul><li>Windows10 v1909</li><li>node.js v12.4.0</li><li>git v2.24.1</li><li>hexo v4.2.0</li></ul><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><h3 id="2-1-环境检查"><a href="#2-1-环境检查" class="headerlink" title="2.1. 环境检查"></a>2.1. 环境检查</h3><p>首先，nodejs、git的安装过程省略。主要要说的是<a href="https://so.csdn.net/so/search?q=hexo&amp;spm=1001.2101.3001.7020">hexo</a>的安装和配置。<br>安装好上面几个后，我们就可以开始 hexo 的配置了。<br>接下来，我们先测试一下是否成功安装了。</p><ul><li>按 win + R 键，输入 cmd 打开命令行</li><li>输入 <code>git --version</code>，如果安装成功会提示一些 git 的版本号信息<ul><li>比如 git 版本是 2.24.1 ，那么就会显示 <code>git version 2.24.1.windows.2</code></li></ul></li><li>同理，输入 <code>npm -v</code>，也会显示 npm 的版本信息<br>现在我们可以开始我们环境的搭建了。</li></ul><h3 id="2-2-搭建Hexo框架"><a href="#2-2-搭建Hexo框架" class="headerlink" title="2.2. 搭建Hexo框架"></a>2.2. 搭建Hexo框架</h3><p>第一步，我们可以先配置 npm 的国内源，然后后面的所有 <code>npm ...</code>命令都可以改成 <code>cnpm ...</code>，改成国内源的好处就是下载会很快，不会被墙。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><br>然后等待安装完成，这个过程可能也点久，耐心等待一下就好了。<br>安装好之后，接下来就是正式的第一步了，在命令行界面，输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g hexo         # 通过npm全局安装hexo<br></code></pre></td></tr></table></figure></p><p>其中，-g 指定全局安装，之后可以在任意位置使用 hexo 命令<br>接下来，进入到你要放博客的静态文件的位置，右键，选择 Git Bash Here，打开 Git Bash 之后，输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo init blog      # 初始化创建，会在你所在位置创建 blog 文件夹<br>cd blog             # 进入 blog 目录<br>npm install         # 进一步安装hexo所需文件<br></code></pre></td></tr></table></figure><br>等待 hexo 安装完成。。。<br>安装完成后，会出现一下这些文件夹以及文件<br><!-- ![hexo自动文件夹以及文件](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421264.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090421264.png" alt="hexo自动文件夹以及文件"></p><p>其中 source 就是存放后面我们写博客的源文件的文件夹<br>接下来输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean          # 清除所有记录<br>hexo generate       # 生成静态网页<br>hexo server -p 80   # 启动服务, -p 80 表示端口号为 80，默认不加端口号是 4000<br></code></pre></td></tr></table></figure><br>然后，使用浏览器访问：<code>http://localhost:80</code>，就可以看到下面的界面了<br><!-- ![默认的hexo界面](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421636.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090421636.png" alt="默认的hexo界面"></p><h3 id="2-3-安装配置主题"><a href="#2-3-安装配置主题" class="headerlink" title="2.3. 安装配置主题"></a>2.3. 安装配置主题</h3><p>如果你不喜欢现在的主题样式可以选择换一个，首先是 <a href="https://hexo.io/themes/">官方主题</a>，可以在里面下载自己喜欢的主题。<br>个人现在使用的是 hexo-theme-butterfly。<br>这里就以这个主题为例：<br>先按 Ctrl + C,断开刚刚的服务，然后输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><br>下载后的主题在 themes 里面，如图：  </p><!-- ![在这里插入图片描述](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421217.png) --><p><img src="https://picgo.chongqing0111.top/images/202212090421217.png" alt="在这里插入图片描述"></p><p>回到 blog 文件夹，用记事本打开 <code>_config.yml</code> ,修改里面的 <code>theme: landscape</code> 为 <code>theme: butterfly</code><br>之后重新输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean          # 清除所有记录<br>hexo generate       # 生成静态网页<br>hexo s      # 启动服务<br></code></pre></td></tr></table></figure><br>然后，使用浏览器访问：<code>http://localhost:4000</code>，就可以看到新的界面了。</p><p>如果这里打开网址报错了，根据提示需要安装渲染器插件</p><!-- ![在这里插入图片描述](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421355.png) --><p><img src="https://picgo.chongqing0111.top/images/202212090421355.png" alt="在这里插入图片描述"></p><p>安装渲染器插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive<br></code></pre></td></tr></table></figure><p>安装完插件再次执行“hexo三连”就可以了</p><h3 id="2-4-解决图片路径问题"><a href="#2-4-解决图片路径问题" class="headerlink" title="2.4. 解决图片路径问题"></a>2.4. 解决图片路径问题</h3><p>由于 Gitee 和 <a href="https://so.csdn.net/so/search?q=Github&amp;spm=1001.2101.3001.7020">Github</a> 不太一样，并且 hexo 3.0 之后获取 url 的方式也不一样了，所以为了解决图片的路径问题，我们需要先安装一个插件。<br>先按 Ctrl + C,断开刚刚的服务，然后输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-asset-image --save  #安装 hexo-asset-image 插件<br></code></pre></td></tr></table></figure></p><p>接下来还需要修改一下 <code>_config.yml</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">……<br>post_asset_folder: true<br>……<br></code></pre></td></tr></table></figure></p><p>之后你要博客只需输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new test       # 生成新的网页<br></code></pre></td></tr></table></figure><br>就会在 <code>source/_posts</code> 下，会同时生成test目录和test.md 网页，将需要的图片放置到test目录下，test.md就可以正常解析了。如图：<br><!-- ![生成对应的文件夹](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421699.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090421699.png" alt="生成对应的文件夹"></p><p>除此之外还建议使用picgo图床的方式放置图片</p><p>方法详见 PicGo 安装及配置.md</p><h2 id="3-配置gitee仓库"><a href="#3-配置gitee仓库" class="headerlink" title="3. 配置gitee仓库"></a>3. 配置gitee仓库</h2><h3 id="3-1-创建仓库"><a href="#3-1-创建仓库" class="headerlink" title="3.1. 创建仓库"></a>3.1. 创建仓库</h3><p>新建一个仓库,用于存放你的博客的相关文件的，推荐仓库名和用户名一样，这样可以省去后面的很多路径问题。<br>几个注意的地方：</p><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>推荐仓库名和用户名一样，这样后面可减少出现路径问题导致的 CSS 样式不加载、图片不显示问题；</li></ul><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><h3 id="3-2-绑定域名"><a href="#3-2-绑定域名" class="headerlink" title="3.2. 绑定域名"></a>3.2. 绑定域名</h3><p>如果你有条件的话，可以申请域名并绑定，这里先不说了。</p><h3 id="3-3-配置SSH-key"><a href="#3-3-配置SSH-key" class="headerlink" title="3.3. 配置SSH key"></a>3.3. 配置SSH key</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的 gitee 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br>先输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd ~/.ssh #检查本机是否已存在的ssh密钥<br></code></pre></td></tr></table></figure></p><p>如果提示：<code>No such file or directory</code>说明你是第一次使用git，如果什么都没有提示，说明本地已经配置了ssh密钥了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-keygen -t rsa -C &quot;邮件地址&quot;<br></code></pre></td></tr></table></figure><br>然后连续3次回车，最终会生成一个文件在用户目录下。<br>打开用户目录（C:\用户\你的用户名\），找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容。<br>打开你的gitee主页，右上角头像那里选择<code>设置</code> → <code>SSH公钥</code>，<br>将刚复制的内容粘贴到<code>公钥</code>那里，<code>标题</code>随便填，填完点击确定。<br><!-- ![公钥的创建](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421604.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090421604.png" alt="公钥的创建"></p><h3 id="3-4-测试是否成功"><a href="#3-4-测试是否成功" class="headerlink" title="3.4. 测试是否成功"></a>3.4. 测试是否成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh -T git@gitee.com  #注意，&#x27;T&#x27;是大写的<br></code></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; Hi 你的gitee用户名! You’ve successfully authenticated, but GITEE.COM does not provide shell access.<br></code></pre></td></tr></table></figure><br>比如我的就是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; Hi chongqing0111! You’ve successfully authenticated, but GITEE.COM does not provide shell access.<br></code></pre></td></tr></table></figure><br>看到这个信息说明SSH已配置成功！<br>接下来还需要配置用户名和邮箱：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config --global user.name &quot;xxx&quot;  #你的 gitee 用户名，即注册时的用户名，个人主页最大那个就是了<br>git config --global user.email  &quot;xxx@qq.com&quot;  #填写你的github注册邮箱<br></code></pre></td></tr></table></figure></p><h2 id="4-部署博客到Gitee"><a href="#4-部署博客到Gitee" class="headerlink" title="4. 部署博客到Gitee"></a>4. 部署博客到Gitee</h2><h3 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1. hexo简介"></a>4.1. hexo简介</h3><p>Hexo是一个简单、快速、强大的基于 Gitee Pages 的博客发布工具，支持 Markdown 格式，有众多优秀插件和主题。<br>官网： <a href="http://hexo.io">http://hexo.io</a></p><h3 id="4-2-部署原理"><a href="#4-2-部署原理" class="headerlink" title="4.2. 部署原理"></a>4.2. 部署原理</h3><p>由于gitee pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，如果要手动更新博文目录和相关链接信息，就会感觉非常的麻烦，所以 hexo 所做的就是将这些 md 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 gitee。</p><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3. 注意事项"></a>4.3. 注意事项</h3><p>部署之前先来说几个注意事项：</p><blockquote><ol><li>很多命令既可以用 Windows 的 cmd 来完成，也可以使用 git bash 来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用 git bash 来执行；</li><li>hexo 有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个theme下的；</li></ol></blockquote><h3 id="4-4-上传到-gitee"><a href="#4-4-上传到-gitee" class="headerlink" title="4.4.上传到 gitee"></a>4.4.上传到 gitee</h3><p>如果你一切都配置好了，发布上传很容易，一句 <code>hexo d</code> 就搞定，当然关键还是你要把所有东西配置好。<br>首先，上面的ssh key肯定要配置好。<br>其次，配置_config.yml中有关deploy的部分：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deploy:<br>  type: git<br>  repo: https://gitee.com/用户名/仓库名  #仓库的地址，比如我的就是：https://gitee.com/chongqing0111/chongqing0111<br>  branch: master<br></code></pre></td></tr></table></figure><br><code>_config.yml</code>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。<br>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><p>接下来我们还需要安装一个插件，在 git bash 下输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></p><p>如果我们没有安装这个插件，此时直接执行 <code>hexo d</code> 的话一般会报如下错误：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Deployer not found: gitee 或者 Deployer not found: git<br></code></pre></td></tr></table></figure></p><p>部署这个命令一定要用 git bash，否则会提示<code>Permission denied (publickey)</code>.<br>打开你的 git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html（没有的可以忽略）。</p><h3 id="4-5-部署Gitee-Pages"><a href="#4-5-部署Gitee-Pages" class="headerlink" title="4.5 部署Gitee Pages"></a>4.5 部署<code>Gitee Pages</code></h3><p>为了让我们的博客其他人可以在网上看到，所以我们需要 <code>gitee</code> 的 <code>Gitee Pages</code> 服务，操作步骤如下：</p><ul><li><p>打开我们的 <code>gitee</code> 上的仓库，然后找到 <code>服务</code> ，然后再找到里面的 <code>Gitee Pages</code> ，点击它。如下图所示：  </p><!-- ![找到 Gitee Pages](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421589.png) --><p><img src="https://picgo.chongqing0111.top/images/202212090421589.png" alt="找到 Gitee Pages"></p></li><li><p>页面跳转之后，往下拉，看到如下图，选择部署的分支（默认为 master）,由于我们直接是部署在根目录的，所以<code>部署分支</code>直接默认，<code>部署目录</code>不用填，最后点击 <code>启动</code> 即可。  </p><!-- ![启动 Gitee Pages 服务](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421570.png) --><p><img src="https://picgo.chongqing0111.top/images/202212090421570.png" alt="启动 Gitee Pages 服务"></p></li></ul><pre><code>部署到GitHub或Gitee上比较类似，但最大的区别就是Gitee Pages 每次推送完最新的一篇文章之后都需要手动更新下，不然访问不到推送的新文章</code></pre><h3 id="4-6-常用hexo命令"><a href="#4-6-常用hexo命令" class="headerlink" title="4.6. 常用hexo命令"></a>4.6. 常用hexo命令</h3><p>常见命令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new &quot;postName&quot; #新建文章<br>hexo new page &quot;pageName&quot; #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本<br></code></pre></td></tr></table></figure></p><p>缩写：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></td></tr></table></figure></p><p>组合命令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo s -g #生成并本地预览<br>hexo d -g #生成并上传<br></code></pre></td></tr></table></figure></p><h3 id="4-7-写博客"><a href="#4-7-写博客" class="headerlink" title="4.7. 写博客"></a>4.7. 写博客</h3><p>定位到我们的hexo根目录，执行命令：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new &#x27;我的第一篇博客&#x27;<br></code></pre></td></tr></table></figure><br>hexo会帮我们在 <code>source/_posts</code>下生成相关md文件：<br><!-- ![hexo new 生成的文件](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090421983.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090421983.png" alt="hexo new 生成的文件"></p><p>我们只需要打开这个文件就可以开始写博客了。<br>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。<br>一般完整格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">---<br>title: 文章名称   #文章页面上的显示名称，一般是中文<br>date: 2013-12-02 15:30:16  #文章生成时间，一般不改，当然也可以任意修改<br>categories: 默认分类  #分类<br>tags: [tag1,tag2,tag3]  #文章标签，可空，多标签请用格式，注意:后面有个空格<br>description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面<br>---<br><br>正文<br><br></code></pre></td></tr></table></figure><br>​    </p><p>上面我们已经用到了 <code>hexo new ‘postName’</code> 命令了，接下来我们看一下 <code>hexo new page &#39;postName’</code>命令。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new page &quot;我的第二篇博客&quot;<br></code></pre></td></tr></table></figure><br>生成如下：<br><!-- ![hexo new page 生成的文件](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090423910.png)   --><br><img src="https://picgo.chongqing0111.top/images/202212090423910.png" alt="hexo new page 生成的文件"><br>最终部署时生成：<code>hexo\public\我的第二篇博客\index.html</code>，但是它不会作为文章出现在博文目录。</p><p>部署到远端依次执行下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean  //清一下缓存<br>hexo g  //生成静态文件<br>hexo d  //推送到码云<br><br>hexo cl;hexo g;hexo d<br></code></pre></td></tr></table></figure><p>进入gitee pages页面更新一下就ok了</p><h4 id="4-7-1-写博客工具"><a href="#4-7-1-写博客工具" class="headerlink" title="4.7.1. 写博客工具"></a>4.7.1. 写博客工具</h4><p>那么用什么工具写博客呢？个人使用的是 Typora ，大家有好用的 hexo 写博客工具可以给我推荐一个。</p><h4 id="4-7-2-如何让博文列表不显示全部内容"><a href="#4-7-2-如何让博文列表不显示全部内容" class="headerlink" title="4.7.2. 如何让博文列表不显示全部内容"></a>4.7.2. 如何让博文列表不显示全部内容</h4><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？<br>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">## 1. 前言  <br>在开始教程之前，你可以了解一下使用gitee pages服务搭建博客有哪些好处：  <br>* gitee 是国内的网站，相较于 github 访问速度更快；<br>* 全是静态文件，访问速度快；<br>* 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；<br>&lt;!--more--&gt;<br>* 数据绝对安全，基于gitee的版本管理，想恢复到哪个历史版本都行；<br>* 博客内容可以轻松打包、转移、发布到其它平台；<br>* 等等。<br><br></code></pre></td></tr></table></figure><br>​    </p><p>结果如图：<br><!-- ![隐藏文章](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090422288.png) --><br><img src="https://picgo.chongqing0111.top/images/202212090422288.png" alt="隐藏文章"></p><h3 id="4-9-注意点"><a href="#4-9-注意点" class="headerlink" title="4.9 注意点"></a>4.9 注意点</h3><p>后面我们在博客更新后，上传之后需要手动到你的 Gitee 仓库里面 <code>更新</code> 一下 Gitee Pages。</p><ul><li>打开我们的 <code>gitee</code> 上的仓库，然后找到 <code>服务</code> ，然后再找到里面的 <code>Gitee Pages</code> ，点击它。如下图所示：  <!-- ![找到 Gitee Pages](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090422133.png) --><img src="https://picgo.chongqing0111.top/images/202212090422133.png" alt="找到 Gitee Pages"></li><li>页面跳转之后，往下拉，看到如下图，选择部署的分支（默认为 master）,由于我们直接是部署在根目录的，所以<code>部署分支</code>直接默认，<code>部署目录</code>不用填，最后点击 <code>更新</code> 即可。  <!-- ![更新博客](https://fastly.jsdelivr.net/gh/chongqing0111/picgo/images/202212090422930.png) --><img src="https://picgo.chongqing0111.top/images/202212090422930.png" alt="更新博客"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/11/25/test/"/>
      <url>/2022/11/25/test/</url>
      
        <content type="html"><![CDATA[<h2 id="这是测试文章"><a href="#这是测试文章" class="headerlink" title="这是测试文章"></a>这是测试文章</h2><h3 id="JS常用API"><a href="#JS常用API" class="headerlink" title="JS常用API"></a>JS常用API</h3><h4 id="split"><a href="#split" class="headerlink" title="split()"></a><strong>split()</strong></h4><p>  方法用于指定规则把一个字符串分割成字符串数组。 <strong><em>(字符串———&gt; 字符串数组)</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">stringObject.<span class="hljs-title function_">split</span>(separator,howmany)<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。</td></tr><tr><td>howmany</td><td>可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;I lover your too&quot;</span><br><span class="hljs-keyword">var</span> a = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);  <br> <span class="hljs-comment">//不传任何切割标志时，默认切割每一个字符  </span><br> <span class="hljs-comment">//返回[&quot;I&quot;, &quot; &quot;, &quot;l&quot;, &quot;o&quot;, &quot;v&quot;, &quot;e&quot;, &quot;r&quot;, &quot; &quot;, &quot;y&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;, &quot;t&quot;, &quot;o&quot;, &quot;o&quot;]</span><br> <br><span class="hljs-keyword">var</span> b = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-comment">//以空格切割返回前两个数组元素</span><br><span class="hljs-comment">//返回[&quot;I&quot;, &quot;lover&quot;]</span><br></code></pre></td></tr></table></figure><p><strong><em>注释：</em></strong> 如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</p><p><strong><em>注释：</em></strong> String.<a href="https://so.csdn.net/so/search?q=split&amp;spm=1001.2101.3001.7020">split</a>() 执行的操作与 Array.join 执行的操作效果是相反的。</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>方法用于把数组中的所有元素放入一个字符串。<strong><em>(字符串数组———&gt; 字符串)</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">join</span>(separator)<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>可选。指定要使用的分隔符。如果省略该参数或者传入undefined，则使用逗号作为分隔符。</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<br><span class="hljs-keyword">var</span> a = arr.<span class="hljs-title function_">join</span>()<span class="hljs-comment">//分割符（如果未填写，则默认为逗号 “，”）</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//a,b,c,d,e</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> a);<span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//abcde</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>));<span class="hljs-comment">//a-b-c-d-e</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;|&quot;</span>));<span class="hljs-comment">//a|b|c|d|e</span><br><br></code></pre></td></tr></table></figure><p><strong><em>注释：</em></strong>array.join(“”)与array.join()并不是一回事（前者无分隔符，后者逗号作为分隔符）</p><p><img src="https://picgo.chongqing0111.top/images/202212010534830.vnd.microsoft.icon" alt="image-20221201024723341"><img src="https://picgo.chongqing0111.top/images/202212010534830.vnd.microsoft.icon" alt="image-20221201024723341"></p><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="/.top//siteicon/favicon.ico"></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
